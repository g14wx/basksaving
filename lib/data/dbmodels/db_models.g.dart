// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'db_models.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:User.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// User TABLE
class TableUser extends SqfEntityTableBase {
  TableUser() {
    // declare properties of EntityTable
    tableName = 'user';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableUser();
  }
}

// Category TABLE
class TableCategory extends SqfEntityTableBase {
  TableCategory() {
    // declare properties of EntityTable
    tableName = 'category';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('category', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableCategory();
  }
}

// Product TABLE
class TableProduct extends SqfEntityTableBase {
  TableProduct() {
    // declare properties of EntityTable
    tableName = 'product';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('product', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('price', DbType.real,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldRelationshipBase(
          TableCategory.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'categoryId',
          isUnique: false,
          isNotNull: false,
          isIndex: false),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableProduct();
  }
}

// MoneyProvider TABLE
class TableMoneyProvider extends SqfEntityTableBase {
  TableMoneyProvider() {
    // declare properties of EntityTable
    tableName = 'money_provider';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('title', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('description', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableMoneyProvider();
  }
}

// Balance_per_month TABLE
class TableBalance_per_month extends SqfEntityTableBase {
  TableBalance_per_month() {
    // declare properties of EntityTable
    tableName = 'balance_per_month';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('balance', DbType.real,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('was_successfully', DbType.bool,
          isUnique: false, isNotNull: false, isIndex: false),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableBalance_per_month();
  }
}

// Balance_per_week TABLE
class TableBalance_per_week extends SqfEntityTableBase {
  TableBalance_per_week() {
    // declare properties of EntityTable
    tableName = 'balance_per_week';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('balance', DbType.real,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('was_successfully', DbType.bool,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldRelationshipBase(
          TableBalance_per_month.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'id_balance_per_month',
          isUnique: false,
          isNotNull: false,
          isIndex: false),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableBalance_per_week();
  }
}

// Balance_per_day TABLE
class TableBalance_per_day extends SqfEntityTableBase {
  TableBalance_per_day() {
    // declare properties of EntityTable
    tableName = 'balance_per_day';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('balance', DbType.real,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('was_successfully', DbType.bool,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldRelationshipBase(
          TableBalance_per_week.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'id_balance_per_week',
          isUnique: false,
          isNotNull: false,
          isIndex: false),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableBalance_per_day();
  }
}

// Buying_list TABLE
class TableBuying_list extends SqfEntityTableBase {
  TableBuying_list() {
    // declare properties of EntityTable
    tableName = 'buying_list';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('budget', DbType.real,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('is_active', DbType.bool,
          defaultValue: true,
          isUnique: false,
          isNotNull: false,
          isIndex: false),
      SqfEntityFieldRelationshipBase(
          TableBalance_per_month.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'id_balance_per_month',
          isUnique: false,
          isNotNull: false,
          isIndex: false),
      SqfEntityFieldRelationshipBase(
          TableBalance_per_week.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'id_balance_per_week',
          isUnique: false,
          isNotNull: false,
          isIndex: false),
      SqfEntityFieldRelationshipBase(
          TableBalance_per_day.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'id_balance_per_day',
          isUnique: false,
          isNotNull: false,
          isIndex: false),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableBuying_list();
  }
}

// Buying_list_has_product TABLE
class TableBuying_list_has_product extends SqfEntityTableBase {
  TableBuying_list_has_product() {
    // declare properties of EntityTable
    tableName = 'buying_list_has_products';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('why_need_it', DbType.text,
          defaultValue: '', isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('already_buyed', DbType.bool,
          defaultValue: true,
          isUnique: false,
          isNotNull: false,
          isIndex: false),
      SqfEntityFieldRelationshipBase(
          TableProduct.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'id_product',
          isUnique: false,
          isNotNull: false,
          isIndex: false),
      SqfEntityFieldRelationshipBase(
          TableBuying_list.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'id_buying_list',
          isUnique: false,
          isNotNull: false,
          isIndex: false),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableBuying_list_has_product();
  }
}

// Transactions TABLE
class TableTransactions extends SqfEntityTableBase {
  TableTransactions() {
    // declare properties of EntityTable
    tableName = 'transactions';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('amount', DbType.real,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldRelationshipBase(
          TableMoneyProvider.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'id_money_provider',
          isUnique: false,
          isNotNull: false,
          isIndex: false),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableTransactions();
  }
}
// END TABLES

// BEGIN SEQUENCES
// identity SEQUENCE
class SequenceIdentitySequence extends SqfEntitySequenceBase {
  SequenceIdentitySequence() {
    sequenceName = 'identity';
    maxValue =
        9007199254740991; /* optional. default is max int (9.223.372.036.854.775.807) */
    cycle = false; /* optional. default is false; */
    minValue = 0; /* optional. default is 0 */
    incrementBy = 1; /* optional. default is 1 */
    startWith = 0; /* optional. default is 0 */
    super.init();
  }
  static SequenceIdentitySequence? _instance;
  static SequenceIdentitySequence get getInstance {
    return _instance = _instance ?? SequenceIdentitySequence();
  }
}
// END SEQUENCES

// BEGIN DATABASE MODEL
class MyDbModel extends SqfEntityModelProvider {
  MyDbModel() {
    databaseName = myDbModel.databaseName;
    password = myDbModel.password;
    dbVersion = myDbModel.dbVersion;
    databaseTables = [
      TableUser.getInstance,
      TableCategory.getInstance,
      TableProduct.getInstance,
      TableMoneyProvider.getInstance,
      TableBalance_per_month.getInstance,
      TableBalance_per_week.getInstance,
      TableBalance_per_day.getInstance,
      TableBuying_list.getInstance,
      TableBuying_list_has_product.getInstance,
      TableTransactions.getInstance,
    ];

    sequences = [
      SequenceIdentitySequence.getInstance,
    ];

    bundledDatabasePath = myDbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region User
class User {
  User({this.id, this.name, this.isDeleted}) {
    _setDefaultValues();
  }
  User.withFields(this.name, this.isDeleted) {
    _setDefaultValues();
  }
  User.withId(this.id, this.name, this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  User.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (User)
  int? id;
  String? name;
  bool? isDeleted;

  BoolResult? saveResult;
  // end FIELDS (User)

  static const bool _softDeleteActivated = true;
  UserManager? __mnUser;

  UserManager get _mnUser {
    return __mnUser = __mnUser ?? UserManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [User]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [User]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [name, isDeleted];
  }

  List<dynamic> toArgsWithIds() {
    return [id, name, isDeleted];
  }

  static Future<List<User>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print('SQFENTITY ERROR User.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<User>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <User>[];
    try {
      objList = list
          .map((user) => User.fromMap(user as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR User.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<User>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<User> objList = <User>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = User.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns User by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int? id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns User if exist, otherwise returns null
  Future<User?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    User? obj;
    final data = await _mnUser.getById([id]);
    if (data.length != 0) {
      obj = User.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (User) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int?> save() async {
    if (id == null || id == 0) {
      id = await _mnUser.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnUser.update(this);
    }

    return id;
  }

  /// saveAs User. Returns a new Primary Key value of User

  /// <returns>Returns a new Primary Key value of User
  Future<int?> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<User> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<User> users) async {
    // final results = _mnUser.saveAll('INSERT OR REPLACE INTO user (id,name,isDeleted)  VALUES (?,?,?)',users);
    // return results; removed in sqfentity_gen 1.3.0+6
    await MyDbModel().batchStart();
    for (final obj in users) {
      await obj.save();
    }
    //    return MyDbModel().batchCommit();
    final result = await MyDbModel().batchCommit();
    for (int i = 0; i < users.length; i++) {
      if (users[i].id == null) {
        users[i].id = result![i] as int;
      }
    }

    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id

  Future<int?> upsert() async {
    try {
      final result = await _mnUser.rawInsert(
          'INSERT OR REPLACE INTO user (id,name,isDeleted)  VALUES (?,?,?)',
          [id, name, isDeleted]);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true, successMessage: 'User id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'User id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'User Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<User>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<User> users) async {
    final results = await _mnUser.rawInsertAll(
        'INSERT OR REPLACE INTO user (id,name,isDeleted)  VALUES (?,?,?)',
        users);
    return results;
  }

  /// Deletes User

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted

  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete User invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnUser
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnUser.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover User>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover User invoked (id=$id)');
    {
      return _mnUser.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  UserFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return UserFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  UserFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return UserFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion user

// region UserField
class UserField extends SearchCriteria {
  UserField(this.userFB);
  // { param = DbParameter(); }
  DbParameter param = DbParameter();
  String _waitingNot = '';
  UserFilterBuilder userFB;

  UserField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  UserFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    userFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, userFB.parameters, param, SqlSyntax.EQuals,
            userFB._addedBlocks)
        : setCriteria(pValue, userFB.parameters, param, SqlSyntax.NotEQuals,
            userFB._addedBlocks);
    _waitingNot = '';
    userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
        userFB._addedBlocks.retVal;
    return userFB;
  }

  UserFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    userFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, userFB.parameters, param, SqlSyntax.EQualsOrNull,
            userFB._addedBlocks)
        : setCriteria(pValue, userFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, userFB._addedBlocks);
    _waitingNot = '';
    userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
        userFB._addedBlocks.retVal;
    return userFB;
  }

  UserFilterBuilder isNull() {
    userFB._addedBlocks = setCriteria(
        0,
        userFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        userFB._addedBlocks);
    _waitingNot = '';
    userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
        userFB._addedBlocks.retVal;
    return userFB;
  }

  UserFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      userFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          userFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          userFB._addedBlocks);
      _waitingNot = '';
      userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
          userFB._addedBlocks.retVal;
    }
    return userFB;
  }

  UserFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      userFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          userFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          userFB._addedBlocks);
      _waitingNot = '';
      userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
          userFB._addedBlocks.retVal;
      userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
          userFB._addedBlocks.retVal;
    }
    return userFB;
  }

  UserFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      userFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          userFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          userFB._addedBlocks);
      _waitingNot = '';
      userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
          userFB._addedBlocks.retVal;
    }
    return userFB;
  }

  UserFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      userFB._addedBlocks = setCriteria(
          pFirst,
          userFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          userFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        userFB._addedBlocks = setCriteria(pFirst, userFB.parameters, param,
            SqlSyntax.LessThan, userFB._addedBlocks);
      } else {
        userFB._addedBlocks = setCriteria(pFirst, userFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, userFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        userFB._addedBlocks = setCriteria(pLast, userFB.parameters, param,
            SqlSyntax.GreaterThan, userFB._addedBlocks);
      } else {
        userFB._addedBlocks = setCriteria(pLast, userFB.parameters, param,
            SqlSyntax.LessThanOrEquals, userFB._addedBlocks);
      }
    }
    _waitingNot = '';
    userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
        userFB._addedBlocks.retVal;
    return userFB;
  }

  UserFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    userFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, userFB.parameters, param, SqlSyntax.GreaterThan,
            userFB._addedBlocks)
        : setCriteria(pValue, userFB.parameters, param,
            SqlSyntax.LessThanOrEquals, userFB._addedBlocks);
    _waitingNot = '';
    userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
        userFB._addedBlocks.retVal;
    return userFB;
  }

  UserFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    userFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, userFB.parameters, param, SqlSyntax.LessThan,
            userFB._addedBlocks)
        : setCriteria(pValue, userFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, userFB._addedBlocks);
    _waitingNot = '';
    userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
        userFB._addedBlocks.retVal;
    return userFB;
  }

  UserFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    userFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, userFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, userFB._addedBlocks)
        : setCriteria(pValue, userFB.parameters, param, SqlSyntax.LessThan,
            userFB._addedBlocks);
    _waitingNot = '';
    userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
        userFB._addedBlocks.retVal;
    return userFB;
  }

  UserFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    userFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, userFB.parameters, param,
            SqlSyntax.LessThanOrEquals, userFB._addedBlocks)
        : setCriteria(pValue, userFB.parameters, param, SqlSyntax.GreaterThan,
            userFB._addedBlocks);
    _waitingNot = '';
    userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
        userFB._addedBlocks.retVal;
    return userFB;
  }

  UserFilterBuilder inValues(dynamic pValue) {
    userFB._addedBlocks = setCriteria(
        pValue,
        userFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        userFB._addedBlocks);
    _waitingNot = '';
    userFB._addedBlocks.needEndBlock![userFB._blockIndex] =
        userFB._addedBlocks.retVal;
    return userFB;
  }
}
// endregion UserField

// region UserFilterBuilder
class UserFilterBuilder extends SearchCriteria {
  UserFilterBuilder(User obj) {
    whereString = '';
    groupByList = <String>[];
    _addedBlocks.needEndBlock!.add(false);
    _addedBlocks.waitingStartBlock!.add(false);
    _obj = obj;
  }
  AddedBlocks _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
  int _blockIndex = 0;
  List<DbParameter> parameters = <DbParameter>[];
  List<String> orderByList = <String>[];
  User? _obj;
  QueryParams qparams = QueryParams();
  int _pagesize = 0;
  int _page = 0;

  /// put the sql keyword 'AND'
  UserFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  UserFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  UserFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock!.add(true);
    _addedBlocks.needEndBlock!.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock![_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  UserFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock![_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  UserFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  UserFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  UserFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock![_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock!.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock!.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  UserFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  UserFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  UserFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  UserFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  UserField setField(UserField? field, String colName, DbType dbtype) {
    return UserField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock![_blockIndex]);
  }

  UserField? _id;
  UserField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  UserField? _name;
  UserField get name {
    return _name = setField(_name, 'name', DbType.text);
  }

  UserField? _isDeleted;
  UserField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted = false;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text || param.value[0] is String
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName!)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName!);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (User._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<User> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult(success: false);

    if (User._softDeleteActivated && !hardDelete) {
      r = await _obj!._mnUser.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj!._mnUser.delete(qparams);
    }
    return r;
  }

  /// Recover List<User> bulk by query
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover User bulk invoked');
    return _obj!._mnUser.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from user ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj!._mnUser.updateBatch(qparams, values);
  }

  /// This method always returns User Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<User>
  Future<User?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj!._mnUser.toList(qparams);
    final data = await objFuture;
    User? obj;
    if (data.isNotEmpty) {
      obj = User.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [User]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c)? userCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final usersFuture = await _obj!._mnUser.toList(qparams);
    final int count = usersFuture[0]['CNT'] as int;
    if (userCount != null) {
      userCount(count);
    }
    return count;
  }

  /// This method returns List<User> [User]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<User>
  Future<List<User>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<User> usersData = await User.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return usersData;
  }

  /// This method returns Json String [User]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [User]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [User]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj!._mnUser.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [User]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM user WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj!._mnUser.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [User]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj!._mnUser.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await User.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    _buildParameters();

    final objectFuture = _obj!._mnUser.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion UserFilterBuilder

// region UserFields
class UserFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion UserFields

//region UserManager
class UserManager extends SqfEntityProvider {
  UserManager()
      : super(MyDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'user';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion UserManager
// region Category
class Category {
  Category({this.id, this.category, this.isDeleted}) {
    _setDefaultValues();
  }
  Category.withFields(this.category, this.isDeleted) {
    _setDefaultValues();
  }
  Category.withId(this.id, this.category, this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Category.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['category'] != null) {
      category = o['category'].toString();
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (Category)
  int? id;
  String? category;
  bool? isDeleted;

  BoolResult? saveResult;
  // end FIELDS (Category)

// COLLECTIONS & VIRTUALS (Category)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plProducts', 'plField2'..]) or so on..
  List<Product>? plProducts;

  /// get Product(s) filtered by id=categoryId
  ProductFilterBuilder? getProducts(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Product()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .categoryId
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Category)

  static const bool _softDeleteActivated = true;
  CategoryManager? __mnCategory;

  CategoryManager get _mnCategory {
    return __mnCategory = __mnCategory ?? CategoryManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (category != null) {
      map['category'] = category;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (category != null) {
      map['category'] = category;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

// COLLECTIONS (Category)
    if (!forQuery) {
      map['Products'] = await getProducts()!.toMapList();
    }
// END COLLECTIONS (Category)

    return map;
  }

  /// This method returns Json String [Category]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Category]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [category, isDeleted];
  }

  List<dynamic> toArgsWithIds() {
    return [id, category, isDeleted];
  }

  static Future<List<Category>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Category.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Category>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Category>[];
    try {
      objList = list
          .map((category) => Category.fromMap(category as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Category.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Category>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Category> objList = <Category>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Category.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('category.plProducts') && */ (preloadFields ==
                null ||
            preloadFields.contains('plProducts'))) {
          /*_loadedfields!.add('category.plProducts'); */
          obj.plProducts = obj.plProducts ??
              await obj.getProducts()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Category by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int? id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Category if exist, otherwise returns null
  Future<Category?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Category? obj;
    final data = await _mnCategory.getById([id]);
    if (data.length != 0) {
      obj = Category.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('category.plProducts') && */ (preloadFields ==
                null ||
            preloadFields.contains('plProducts'))) {
          /*_loadedfields!.add('category.plProducts'); */
          obj.plProducts = obj.plProducts ??
              await obj.getProducts()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Category) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int?> save() async {
    if (id == null || id == 0) {
      id = await _mnCategory.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnCategory.update(this);
    }

    return id;
  }

  /// saveAs Category. Returns a new Primary Key value of Category

  /// <returns>Returns a new Primary Key value of Category
  Future<int?> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<Category> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Category> categories) async {
    // final results = _mnCategory.saveAll('INSERT OR REPLACE INTO category (id,category,isDeleted)  VALUES (?,?,?)',categories);
    // return results; removed in sqfentity_gen 1.3.0+6
    await MyDbModel().batchStart();
    for (final obj in categories) {
      await obj.save();
    }
    //    return MyDbModel().batchCommit();
    final result = await MyDbModel().batchCommit();
    for (int i = 0; i < categories.length; i++) {
      if (categories[i].id == null) {
        categories[i].id = result![i] as int;
      }
    }

    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id

  Future<int?> upsert() async {
    try {
      final result = await _mnCategory.rawInsert(
          'INSERT OR REPLACE INTO category (id,category,isDeleted)  VALUES (?,?,?)',
          [id, category, isDeleted]);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Category id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Category id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Category Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Category>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Category> categories) async {
    final results = await _mnCategory.rawInsertAll(
        'INSERT OR REPLACE INTO category (id,category,isDeleted)  VALUES (?,?,?)',
        categories);
    return results;
  }

  /// Deletes Category

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted

  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Category invoked (id=$id)');
    var result = BoolResult(success: false);
    {
      result =
          await Product().select().categoryId.equals(id).and.delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnCategory
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnCategory.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Category>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover Category invoked (id=$id)');
    var result = BoolResult(success: false);
    if (recoverChilds) {
      result = await Product()
          .select(getIsDeleted: true)
          .isDeleted
          .equals(true)
          .and
          .categoryId
          .equals(id)
          .and
          .update({'isDeleted': 0});
    }
    if (!result.success && recoverChilds) {
      return result;
    }
    {
      return _mnCategory.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  CategoryFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return CategoryFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  CategoryFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return CategoryFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion category

// region CategoryField
class CategoryField extends SearchCriteria {
  CategoryField(this.categoryFB);
  // { param = DbParameter(); }
  DbParameter param = DbParameter();
  String _waitingNot = '';
  CategoryFilterBuilder categoryFB;

  CategoryField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  CategoryFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    categoryFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, categoryFB.parameters, param, SqlSyntax.EQuals,
            categoryFB._addedBlocks)
        : setCriteria(pValue, categoryFB.parameters, param, SqlSyntax.NotEQuals,
            categoryFB._addedBlocks);
    _waitingNot = '';
    categoryFB._addedBlocks.needEndBlock![categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }

  CategoryFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    categoryFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, categoryFB.parameters, param,
            SqlSyntax.EQualsOrNull, categoryFB._addedBlocks)
        : setCriteria(pValue, categoryFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, categoryFB._addedBlocks);
    _waitingNot = '';
    categoryFB._addedBlocks.needEndBlock![categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }

  CategoryFilterBuilder isNull() {
    categoryFB._addedBlocks = setCriteria(
        0,
        categoryFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        categoryFB._addedBlocks);
    _waitingNot = '';
    categoryFB._addedBlocks.needEndBlock![categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }

  CategoryFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      categoryFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          categoryFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          categoryFB._addedBlocks);
      _waitingNot = '';
      categoryFB._addedBlocks.needEndBlock![categoryFB._blockIndex] =
          categoryFB._addedBlocks.retVal;
    }
    return categoryFB;
  }

  CategoryFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      categoryFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          categoryFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          categoryFB._addedBlocks);
      _waitingNot = '';
      categoryFB._addedBlocks.needEndBlock![categoryFB._blockIndex] =
          categoryFB._addedBlocks.retVal;
      categoryFB._addedBlocks.needEndBlock![categoryFB._blockIndex] =
          categoryFB._addedBlocks.retVal;
    }
    return categoryFB;
  }

  CategoryFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      categoryFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          categoryFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          categoryFB._addedBlocks);
      _waitingNot = '';
      categoryFB._addedBlocks.needEndBlock![categoryFB._blockIndex] =
          categoryFB._addedBlocks.retVal;
    }
    return categoryFB;
  }

  CategoryFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      categoryFB._addedBlocks = setCriteria(
          pFirst,
          categoryFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          categoryFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        categoryFB._addedBlocks = setCriteria(pFirst, categoryFB.parameters,
            param, SqlSyntax.LessThan, categoryFB._addedBlocks);
      } else {
        categoryFB._addedBlocks = setCriteria(pFirst, categoryFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, categoryFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        categoryFB._addedBlocks = setCriteria(pLast, categoryFB.parameters,
            param, SqlSyntax.GreaterThan, categoryFB._addedBlocks);
      } else {
        categoryFB._addedBlocks = setCriteria(pLast, categoryFB.parameters,
            param, SqlSyntax.LessThanOrEquals, categoryFB._addedBlocks);
      }
    }
    _waitingNot = '';
    categoryFB._addedBlocks.needEndBlock![categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }

  CategoryFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    categoryFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, categoryFB.parameters, param,
            SqlSyntax.GreaterThan, categoryFB._addedBlocks)
        : setCriteria(pValue, categoryFB.parameters, param,
            SqlSyntax.LessThanOrEquals, categoryFB._addedBlocks);
    _waitingNot = '';
    categoryFB._addedBlocks.needEndBlock![categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }

  CategoryFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    categoryFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, categoryFB.parameters, param, SqlSyntax.LessThan,
            categoryFB._addedBlocks)
        : setCriteria(pValue, categoryFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, categoryFB._addedBlocks);
    _waitingNot = '';
    categoryFB._addedBlocks.needEndBlock![categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }

  CategoryFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    categoryFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, categoryFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, categoryFB._addedBlocks)
        : setCriteria(pValue, categoryFB.parameters, param, SqlSyntax.LessThan,
            categoryFB._addedBlocks);
    _waitingNot = '';
    categoryFB._addedBlocks.needEndBlock![categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }

  CategoryFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    categoryFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, categoryFB.parameters, param,
            SqlSyntax.LessThanOrEquals, categoryFB._addedBlocks)
        : setCriteria(pValue, categoryFB.parameters, param,
            SqlSyntax.GreaterThan, categoryFB._addedBlocks);
    _waitingNot = '';
    categoryFB._addedBlocks.needEndBlock![categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }

  CategoryFilterBuilder inValues(dynamic pValue) {
    categoryFB._addedBlocks = setCriteria(
        pValue,
        categoryFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        categoryFB._addedBlocks);
    _waitingNot = '';
    categoryFB._addedBlocks.needEndBlock![categoryFB._blockIndex] =
        categoryFB._addedBlocks.retVal;
    return categoryFB;
  }
}
// endregion CategoryField

// region CategoryFilterBuilder
class CategoryFilterBuilder extends SearchCriteria {
  CategoryFilterBuilder(Category obj) {
    whereString = '';
    groupByList = <String>[];
    _addedBlocks.needEndBlock!.add(false);
    _addedBlocks.waitingStartBlock!.add(false);
    _obj = obj;
  }
  AddedBlocks _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
  int _blockIndex = 0;
  List<DbParameter> parameters = <DbParameter>[];
  List<String> orderByList = <String>[];
  Category? _obj;
  QueryParams qparams = QueryParams();
  int _pagesize = 0;
  int _page = 0;

  /// put the sql keyword 'AND'
  CategoryFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  CategoryFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  CategoryFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock!.add(true);
    _addedBlocks.needEndBlock!.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock![_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  CategoryFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock![_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  CategoryFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  CategoryFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  CategoryFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock![_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock!.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock!.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  CategoryFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  CategoryFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  CategoryFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  CategoryFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  CategoryField setField(CategoryField? field, String colName, DbType dbtype) {
    return CategoryField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock![_blockIndex]);
  }

  CategoryField? _id;
  CategoryField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  CategoryField? _category;
  CategoryField get category {
    return _category = setField(_category, 'category', DbType.text);
  }

  CategoryField? _isDeleted;
  CategoryField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted = false;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text || param.value[0] is String
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName!)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName!);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Category._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Category> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult(success: false);
    // Delete sub records where in (Product) according to DeleteRule.CASCADE
    final idListProductBYcategoryId = toListPrimaryKeySQL(false);
    final resProductBYcategoryId = await Product()
        .select()
        .where('categoryId IN (${idListProductBYcategoryId['sql']})',
            parameterValue: idListProductBYcategoryId['args'])
        .delete(hardDelete);
    if (!resProductBYcategoryId.success) {
      return resProductBYcategoryId;
    }

    if (Category._softDeleteActivated && !hardDelete) {
      r = await _obj!._mnCategory.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj!._mnCategory.delete(qparams);
    }
    return r;
  }

  /// Recover List<Category> bulk by query
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover Category bulk invoked');
    // Recover sub records where in (Product) according to DeleteRule.CASCADE
    final idListProductBYcategoryId = toListPrimaryKeySQL(false);
    final resProductBYcategoryId = await Product()
        .select()
        .where('categoryId IN (${idListProductBYcategoryId['sql']})',
            parameterValue: idListProductBYcategoryId['args'])
        .update({'isDeleted': 0});
    if (!resProductBYcategoryId.success) {
      return resProductBYcategoryId;
    }
    return _obj!._mnCategory.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from category ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj!._mnCategory.updateBatch(qparams, values);
  }

  /// This method always returns Category Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Category>
  Future<Category?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj!._mnCategory.toList(qparams);
    final data = await objFuture;
    Category? obj;
    if (data.isNotEmpty) {
      obj = Category.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('category.plProducts') && */ (preloadFields ==
                null ||
            preloadFields.contains('plProducts'))) {
          /*_loadedfields!.add('category.plProducts'); */
          obj.plProducts = obj.plProducts ??
              await obj.getProducts()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Category]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c)? categoryCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final categoriesFuture = await _obj!._mnCategory.toList(qparams);
    final int count = categoriesFuture[0]['CNT'] as int;
    if (categoryCount != null) {
      categoryCount(count);
    }
    return count;
  }

  /// This method returns List<Category> [Category]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Category>
  Future<List<Category>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Category> categoriesData = await Category.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return categoriesData;
  }

  /// This method returns Json String [Category]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Category]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Category]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj!._mnCategory.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Category]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM category WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj!._mnCategory.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Category]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj!._mnCategory.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Category.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    _buildParameters();

    final objectFuture = _obj!._mnCategory.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion CategoryFilterBuilder

// region CategoryFields
class CategoryFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fCategory;
  static TableField get category {
    return _fCategory =
        _fCategory ?? SqlSyntax.setField(_fCategory, 'category', DbType.text);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion CategoryFields

//region CategoryManager
class CategoryManager extends SqfEntityProvider {
  CategoryManager()
      : super(MyDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'category';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion CategoryManager
// region Product
class Product {
  Product(
      {this.id, this.product, this.price, this.categoryId, this.isDeleted}) {
    _setDefaultValues();
  }
  Product.withFields(
      this.product, this.price, this.categoryId, this.isDeleted) {
    _setDefaultValues();
  }
  Product.withId(
      this.id, this.product, this.price, this.categoryId, this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Product.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['product'] != null) {
      product = o['product'].toString();
    }
    if (o['price'] != null) {
      price = double.tryParse(o['price'].toString());
    }
    categoryId = int.tryParse(o['categoryId'].toString());

    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;

    // RELATIONSHIPS FromMAP
    plCategory = o['category'] != null
        ? Category.fromMap(o['category'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (Product)
  int? id;
  String? product;
  double? price;
  int? categoryId;
  bool? isDeleted;

  BoolResult? saveResult;
  // end FIELDS (Product)

// RELATIONSHIPS (Product)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plCategory', 'plField2'..]) or so on..
  Category? plCategory;

  /// get Category By CategoryId
  Future<Category?> getCategory(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Category().getById(categoryId,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (Product)

// COLLECTIONS & VIRTUALS (Product)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plBuying_list_has_products', 'plField2'..]) or so on..
  List<Buying_list_has_product>? plBuying_list_has_products;

  /// get Buying_list_has_product(s) filtered by id=id_product
  Buying_list_has_productFilterBuilder? getBuying_list_has_products(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Buying_list_has_product()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .id_product
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Product)

  static const bool _softDeleteActivated = true;
  ProductManager? __mnProduct;

  ProductManager get _mnProduct {
    return __mnProduct = __mnProduct ?? ProductManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (product != null) {
      map['product'] = product;
    }

    if (price != null) {
      map['price'] = price;
    }

    if (categoryId != null) {
      map['categoryId'] = forView
          ? plCategory == null
              ? categoryId
              : plCategory!.category
          : categoryId;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (product != null) {
      map['product'] = product;
    }

    if (price != null) {
      map['price'] = price;
    }

    if (categoryId != null) {
      map['categoryId'] = forView
          ? plCategory == null
              ? categoryId
              : plCategory!.category
          : categoryId;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

// COLLECTIONS (Product)
    if (!forQuery) {
      map['Buying_list_has_products'] =
          await getBuying_list_has_products()!.toMapList();
    }
// END COLLECTIONS (Product)

    return map;
  }

  /// This method returns Json String [Product]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Product]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [product, price, categoryId, isDeleted];
  }

  List<dynamic> toArgsWithIds() {
    return [id, product, price, categoryId, isDeleted];
  }

  static Future<List<Product>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Product.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Product>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Product>[];
    try {
      objList = list
          .map((product) => Product.fromMap(product as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Product.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Product>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Product> objList = <Product>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Product.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('product.plBuying_list_has_products') && */ (preloadFields ==
                null ||
            preloadFields.contains('plBuying_list_has_products'))) {
          /*_loadedfields!.add('product.plBuying_list_has_products'); */
          obj.plBuying_list_has_products = obj.plBuying_list_has_products ??
              await obj.getBuying_list_has_products()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('category.plCategory') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plCategory'))) {
          /*_loadedfields!.add('category.plCategory');*/
          obj.plCategory = obj.plCategory ??
              await obj.getCategory(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Product by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int? id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Product if exist, otherwise returns null
  Future<Product?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Product? obj;
    final data = await _mnProduct.getById([id]);
    if (data.length != 0) {
      obj = Product.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('product.plBuying_list_has_products') && */ (preloadFields ==
                null ||
            preloadFields.contains('plBuying_list_has_products'))) {
          /*_loadedfields!.add('product.plBuying_list_has_products'); */
          obj.plBuying_list_has_products = obj.plBuying_list_has_products ??
              await obj.getBuying_list_has_products()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('category.plCategory') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plCategory'))) {
          /*_loadedfields!.add('category.plCategory');*/
          obj.plCategory = obj.plCategory ??
              await obj.getCategory(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Product) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int?> save() async {
    if (id == null || id == 0) {
      id = await _mnProduct.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnProduct.update(this);
    }

    return id;
  }

  /// saveAs Product. Returns a new Primary Key value of Product

  /// <returns>Returns a new Primary Key value of Product
  Future<int?> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<Product> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Product> products) async {
    // final results = _mnProduct.saveAll('INSERT OR REPLACE INTO product (id,product, price, categoryId,isDeleted)  VALUES (?,?,?,?,?)',products);
    // return results; removed in sqfentity_gen 1.3.0+6
    await MyDbModel().batchStart();
    for (final obj in products) {
      await obj.save();
    }
    //    return MyDbModel().batchCommit();
    final result = await MyDbModel().batchCommit();
    for (int i = 0; i < products.length; i++) {
      if (products[i].id == null) {
        products[i].id = result![i] as int;
      }
    }

    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id

  Future<int?> upsert() async {
    try {
      final result = await _mnProduct.rawInsert(
          'INSERT OR REPLACE INTO product (id,product, price, categoryId,isDeleted)  VALUES (?,?,?,?,?)',
          [id, product, price, categoryId, isDeleted]);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Product id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Product id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Product Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Product>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Product> products) async {
    final results = await _mnProduct.rawInsertAll(
        'INSERT OR REPLACE INTO product (id,product, price, categoryId,isDeleted)  VALUES (?,?,?,?,?)',
        products);
    return results;
  }

  /// Deletes Product

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted

  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Product invoked (id=$id)');
    var result = BoolResult(success: false);
    {
      result = await Buying_list_has_product()
          .select()
          .id_product
          .equals(id)
          .and
          .delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnProduct
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnProduct.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Product>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover Product invoked (id=$id)');
    {
      return _mnProduct.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  ProductFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ProductFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  ProductFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ProductFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion product

// region ProductField
class ProductField extends SearchCriteria {
  ProductField(this.productFB);
  // { param = DbParameter(); }
  DbParameter param = DbParameter();
  String _waitingNot = '';
  ProductFilterBuilder productFB;

  ProductField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  ProductFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    productFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, productFB.parameters, param, SqlSyntax.EQuals,
            productFB._addedBlocks)
        : setCriteria(pValue, productFB.parameters, param, SqlSyntax.NotEQuals,
            productFB._addedBlocks);
    _waitingNot = '';
    productFB._addedBlocks.needEndBlock![productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  ProductFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    productFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, productFB.parameters, param,
            SqlSyntax.EQualsOrNull, productFB._addedBlocks)
        : setCriteria(pValue, productFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, productFB._addedBlocks);
    _waitingNot = '';
    productFB._addedBlocks.needEndBlock![productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  ProductFilterBuilder isNull() {
    productFB._addedBlocks = setCriteria(
        0,
        productFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        productFB._addedBlocks);
    _waitingNot = '';
    productFB._addedBlocks.needEndBlock![productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  ProductFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      productFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          productFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          productFB._addedBlocks);
      _waitingNot = '';
      productFB._addedBlocks.needEndBlock![productFB._blockIndex] =
          productFB._addedBlocks.retVal;
    }
    return productFB;
  }

  ProductFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      productFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          productFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          productFB._addedBlocks);
      _waitingNot = '';
      productFB._addedBlocks.needEndBlock![productFB._blockIndex] =
          productFB._addedBlocks.retVal;
      productFB._addedBlocks.needEndBlock![productFB._blockIndex] =
          productFB._addedBlocks.retVal;
    }
    return productFB;
  }

  ProductFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      productFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          productFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          productFB._addedBlocks);
      _waitingNot = '';
      productFB._addedBlocks.needEndBlock![productFB._blockIndex] =
          productFB._addedBlocks.retVal;
    }
    return productFB;
  }

  ProductFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      productFB._addedBlocks = setCriteria(
          pFirst,
          productFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          productFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        productFB._addedBlocks = setCriteria(pFirst, productFB.parameters,
            param, SqlSyntax.LessThan, productFB._addedBlocks);
      } else {
        productFB._addedBlocks = setCriteria(pFirst, productFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, productFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        productFB._addedBlocks = setCriteria(pLast, productFB.parameters, param,
            SqlSyntax.GreaterThan, productFB._addedBlocks);
      } else {
        productFB._addedBlocks = setCriteria(pLast, productFB.parameters, param,
            SqlSyntax.LessThanOrEquals, productFB._addedBlocks);
      }
    }
    _waitingNot = '';
    productFB._addedBlocks.needEndBlock![productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  ProductFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    productFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, productFB.parameters, param,
            SqlSyntax.GreaterThan, productFB._addedBlocks)
        : setCriteria(pValue, productFB.parameters, param,
            SqlSyntax.LessThanOrEquals, productFB._addedBlocks);
    _waitingNot = '';
    productFB._addedBlocks.needEndBlock![productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  ProductFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    productFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, productFB.parameters, param, SqlSyntax.LessThan,
            productFB._addedBlocks)
        : setCriteria(pValue, productFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, productFB._addedBlocks);
    _waitingNot = '';
    productFB._addedBlocks.needEndBlock![productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  ProductFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    productFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, productFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, productFB._addedBlocks)
        : setCriteria(pValue, productFB.parameters, param, SqlSyntax.LessThan,
            productFB._addedBlocks);
    _waitingNot = '';
    productFB._addedBlocks.needEndBlock![productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  ProductFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    productFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, productFB.parameters, param,
            SqlSyntax.LessThanOrEquals, productFB._addedBlocks)
        : setCriteria(pValue, productFB.parameters, param,
            SqlSyntax.GreaterThan, productFB._addedBlocks);
    _waitingNot = '';
    productFB._addedBlocks.needEndBlock![productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }

  ProductFilterBuilder inValues(dynamic pValue) {
    productFB._addedBlocks = setCriteria(
        pValue,
        productFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        productFB._addedBlocks);
    _waitingNot = '';
    productFB._addedBlocks.needEndBlock![productFB._blockIndex] =
        productFB._addedBlocks.retVal;
    return productFB;
  }
}
// endregion ProductField

// region ProductFilterBuilder
class ProductFilterBuilder extends SearchCriteria {
  ProductFilterBuilder(Product obj) {
    whereString = '';
    groupByList = <String>[];
    _addedBlocks.needEndBlock!.add(false);
    _addedBlocks.waitingStartBlock!.add(false);
    _obj = obj;
  }
  AddedBlocks _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
  int _blockIndex = 0;
  List<DbParameter> parameters = <DbParameter>[];
  List<String> orderByList = <String>[];
  Product? _obj;
  QueryParams qparams = QueryParams();
  int _pagesize = 0;
  int _page = 0;

  /// put the sql keyword 'AND'
  ProductFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  ProductFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  ProductFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock!.add(true);
    _addedBlocks.needEndBlock!.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock![_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  ProductFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock![_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  ProductFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  ProductFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  ProductFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock![_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock!.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock!.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  ProductFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  ProductFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  ProductFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  ProductFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  ProductField setField(ProductField? field, String colName, DbType dbtype) {
    return ProductField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock![_blockIndex]);
  }

  ProductField? _id;
  ProductField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  ProductField? _product;
  ProductField get product {
    return _product = setField(_product, 'product', DbType.text);
  }

  ProductField? _price;
  ProductField get price {
    return _price = setField(_price, 'price', DbType.real);
  }

  ProductField? _categoryId;
  ProductField get categoryId {
    return _categoryId = setField(_categoryId, 'categoryId', DbType.integer);
  }

  ProductField? _isDeleted;
  ProductField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted = false;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text || param.value[0] is String
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName!)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName!);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Product._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Product> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult(success: false);
    // Delete sub records where in (Buying_list_has_product) according to DeleteRule.CASCADE
    final idListBuying_list_has_productBYid_product =
        toListPrimaryKeySQL(false);
    final resBuying_list_has_productBYid_product = await Buying_list_has_product()
        .select()
        .where(
            'id_product IN (${idListBuying_list_has_productBYid_product['sql']})',
            parameterValue: idListBuying_list_has_productBYid_product['args'])
        .delete(hardDelete);
    if (!resBuying_list_has_productBYid_product.success) {
      return resBuying_list_has_productBYid_product;
    }

    if (Product._softDeleteActivated && !hardDelete) {
      r = await _obj!._mnProduct.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj!._mnProduct.delete(qparams);
    }
    return r;
  }

  /// Recover List<Product> bulk by query
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover Product bulk invoked');
    return _obj!._mnProduct.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from product ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj!._mnProduct.updateBatch(qparams, values);
  }

  /// This method always returns Product Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Product>
  Future<Product?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj!._mnProduct.toList(qparams);
    final data = await objFuture;
    Product? obj;
    if (data.isNotEmpty) {
      obj = Product.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('product.plBuying_list_has_products') && */ (preloadFields ==
                null ||
            preloadFields.contains('plBuying_list_has_products'))) {
          /*_loadedfields!.add('product.plBuying_list_has_products'); */
          obj.plBuying_list_has_products = obj.plBuying_list_has_products ??
              await obj.getBuying_list_has_products()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('category.plCategory') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plCategory'))) {
          /*_loadedfields!.add('category.plCategory');*/
          obj.plCategory = obj.plCategory ??
              await obj.getCategory(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Product]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c)? productCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final productsFuture = await _obj!._mnProduct.toList(qparams);
    final int count = productsFuture[0]['CNT'] as int;
    if (productCount != null) {
      productCount(count);
    }
    return count;
  }

  /// This method returns List<Product> [Product]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Product>
  Future<List<Product>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Product> productsData = await Product.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return productsData;
  }

  /// This method returns Json String [Product]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Product]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Product]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj!._mnProduct.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Product]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM product WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj!._mnProduct.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Product]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj!._mnProduct.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Product.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    _buildParameters();

    final objectFuture = _obj!._mnProduct.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion ProductFilterBuilder

// region ProductFields
class ProductFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fProduct;
  static TableField get product {
    return _fProduct =
        _fProduct ?? SqlSyntax.setField(_fProduct, 'product', DbType.text);
  }

  static TableField? _fPrice;
  static TableField get price {
    return _fPrice =
        _fPrice ?? SqlSyntax.setField(_fPrice, 'price', DbType.real);
  }

  static TableField? _fCategoryId;
  static TableField get categoryId {
    return _fCategoryId = _fCategoryId ??
        SqlSyntax.setField(_fCategoryId, 'categoryId', DbType.integer);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion ProductFields

//region ProductManager
class ProductManager extends SqfEntityProvider {
  ProductManager()
      : super(MyDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'product';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion ProductManager
// region MoneyProvider
class MoneyProvider {
  MoneyProvider({this.id, this.title, this.description, this.isDeleted}) {
    _setDefaultValues();
  }
  MoneyProvider.withFields(this.title, this.description, this.isDeleted) {
    _setDefaultValues();
  }
  MoneyProvider.withId(this.id, this.title, this.description, this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  MoneyProvider.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['title'] != null) {
      title = o['title'].toString();
    }
    if (o['description'] != null) {
      description = o['description'].toString();
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (MoneyProvider)
  int? id;
  String? title;
  String? description;
  bool? isDeleted;

  BoolResult? saveResult;
  // end FIELDS (MoneyProvider)

// COLLECTIONS & VIRTUALS (MoneyProvider)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plTransactionses', 'plField2'..]) or so on..
  List<Transactions>? plTransactionses;

  /// get Transactions(s) filtered by id=id_money_provider
  TransactionsFilterBuilder? getTransactionses(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Transactions()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .id_money_provider
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (MoneyProvider)

  static const bool _softDeleteActivated = true;
  MoneyProviderManager? __mnMoneyProvider;

  MoneyProviderManager get _mnMoneyProvider {
    return __mnMoneyProvider = __mnMoneyProvider ?? MoneyProviderManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (title != null) {
      map['title'] = title;
    }

    if (description != null) {
      map['description'] = description;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (title != null) {
      map['title'] = title;
    }

    if (description != null) {
      map['description'] = description;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

// COLLECTIONS (MoneyProvider)
    if (!forQuery) {
      map['Transactionses'] = await getTransactionses()!.toMapList();
    }
// END COLLECTIONS (MoneyProvider)

    return map;
  }

  /// This method returns Json String [MoneyProvider]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [MoneyProvider]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [title, description, isDeleted];
  }

  List<dynamic> toArgsWithIds() {
    return [id, title, description, isDeleted];
  }

  static Future<List<MoneyProvider>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR MoneyProvider.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<MoneyProvider>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <MoneyProvider>[];
    try {
      objList = list
          .map((moneyprovider) =>
              MoneyProvider.fromMap(moneyprovider as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR MoneyProvider.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<MoneyProvider>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<MoneyProvider> objList = <MoneyProvider>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = MoneyProvider.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('money_provider.plTransactionses') && */ (preloadFields ==
                null ||
            preloadFields.contains('plTransactionses'))) {
          /*_loadedfields!.add('money_provider.plTransactionses'); */
          obj.plTransactionses = obj.plTransactionses ??
              await obj.getTransactionses()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns MoneyProvider by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int? id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns MoneyProvider if exist, otherwise returns null
  Future<MoneyProvider?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    MoneyProvider? obj;
    final data = await _mnMoneyProvider.getById([id]);
    if (data.length != 0) {
      obj = MoneyProvider.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('money_provider.plTransactionses') && */ (preloadFields ==
                null ||
            preloadFields.contains('plTransactionses'))) {
          /*_loadedfields!.add('money_provider.plTransactionses'); */
          obj.plTransactionses = obj.plTransactionses ??
              await obj.getTransactionses()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (MoneyProvider) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int?> save() async {
    if (id == null || id == 0) {
      id = await _mnMoneyProvider.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnMoneyProvider.update(this);
    }

    return id;
  }

  /// saveAs MoneyProvider. Returns a new Primary Key value of MoneyProvider

  /// <returns>Returns a new Primary Key value of MoneyProvider
  Future<int?> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<MoneyProvider> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(
      List<MoneyProvider> moneyproviders) async {
    // final results = _mnMoneyProvider.saveAll('INSERT OR REPLACE INTO money_provider (id,title, description,isDeleted)  VALUES (?,?,?,?)',moneyproviders);
    // return results; removed in sqfentity_gen 1.3.0+6
    await MyDbModel().batchStart();
    for (final obj in moneyproviders) {
      await obj.save();
    }
    //    return MyDbModel().batchCommit();
    final result = await MyDbModel().batchCommit();
    for (int i = 0; i < moneyproviders.length; i++) {
      if (moneyproviders[i].id == null) {
        moneyproviders[i].id = result![i] as int;
      }
    }

    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id

  Future<int?> upsert() async {
    try {
      final result = await _mnMoneyProvider.rawInsert(
          'INSERT OR REPLACE INTO money_provider (id,title, description,isDeleted)  VALUES (?,?,?,?)',
          [id, title, description, isDeleted]);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'MoneyProvider id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'MoneyProvider id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'MoneyProvider Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<MoneyProvider>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<MoneyProvider> moneyproviders) async {
    final results = await _mnMoneyProvider.rawInsertAll(
        'INSERT OR REPLACE INTO money_provider (id,title, description,isDeleted)  VALUES (?,?,?,?)',
        moneyproviders);
    return results;
  }

  /// Deletes MoneyProvider

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted

  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete MoneyProvider invoked (id=$id)');
    var result = BoolResult(success: false);
    {
      result = await Transactions()
          .select()
          .id_money_provider
          .equals(id)
          .and
          .delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnMoneyProvider
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnMoneyProvider.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover MoneyProvider>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover MoneyProvider invoked (id=$id)');
    var result = BoolResult(success: false);
    if (recoverChilds) {
      result = await Transactions()
          .select(getIsDeleted: true)
          .isDeleted
          .equals(true)
          .and
          .id_money_provider
          .equals(id)
          .and
          .update({'isDeleted': 0});
    }
    if (!result.success && recoverChilds) {
      return result;
    }
    {
      return _mnMoneyProvider.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  MoneyProviderFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return MoneyProviderFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  MoneyProviderFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return MoneyProviderFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion moneyprovider

// region MoneyProviderField
class MoneyProviderField extends SearchCriteria {
  MoneyProviderField(this.moneyproviderFB);
  // { param = DbParameter(); }
  DbParameter param = DbParameter();
  String _waitingNot = '';
  MoneyProviderFilterBuilder moneyproviderFB;

  MoneyProviderField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  MoneyProviderFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    moneyproviderFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, moneyproviderFB.parameters, param,
            SqlSyntax.EQuals, moneyproviderFB._addedBlocks)
        : setCriteria(pValue, moneyproviderFB.parameters, param,
            SqlSyntax.NotEQuals, moneyproviderFB._addedBlocks);
    _waitingNot = '';
    moneyproviderFB._addedBlocks.needEndBlock![moneyproviderFB._blockIndex] =
        moneyproviderFB._addedBlocks.retVal;
    return moneyproviderFB;
  }

  MoneyProviderFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    moneyproviderFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, moneyproviderFB.parameters, param,
            SqlSyntax.EQualsOrNull, moneyproviderFB._addedBlocks)
        : setCriteria(pValue, moneyproviderFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, moneyproviderFB._addedBlocks);
    _waitingNot = '';
    moneyproviderFB._addedBlocks.needEndBlock![moneyproviderFB._blockIndex] =
        moneyproviderFB._addedBlocks.retVal;
    return moneyproviderFB;
  }

  MoneyProviderFilterBuilder isNull() {
    moneyproviderFB._addedBlocks = setCriteria(
        0,
        moneyproviderFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        moneyproviderFB._addedBlocks);
    _waitingNot = '';
    moneyproviderFB._addedBlocks.needEndBlock![moneyproviderFB._blockIndex] =
        moneyproviderFB._addedBlocks.retVal;
    return moneyproviderFB;
  }

  MoneyProviderFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      moneyproviderFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          moneyproviderFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          moneyproviderFB._addedBlocks);
      _waitingNot = '';
      moneyproviderFB._addedBlocks.needEndBlock![moneyproviderFB._blockIndex] =
          moneyproviderFB._addedBlocks.retVal;
    }
    return moneyproviderFB;
  }

  MoneyProviderFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      moneyproviderFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          moneyproviderFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          moneyproviderFB._addedBlocks);
      _waitingNot = '';
      moneyproviderFB._addedBlocks.needEndBlock![moneyproviderFB._blockIndex] =
          moneyproviderFB._addedBlocks.retVal;
      moneyproviderFB._addedBlocks.needEndBlock![moneyproviderFB._blockIndex] =
          moneyproviderFB._addedBlocks.retVal;
    }
    return moneyproviderFB;
  }

  MoneyProviderFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      moneyproviderFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          moneyproviderFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          moneyproviderFB._addedBlocks);
      _waitingNot = '';
      moneyproviderFB._addedBlocks.needEndBlock![moneyproviderFB._blockIndex] =
          moneyproviderFB._addedBlocks.retVal;
    }
    return moneyproviderFB;
  }

  MoneyProviderFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      moneyproviderFB._addedBlocks = setCriteria(
          pFirst,
          moneyproviderFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          moneyproviderFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        moneyproviderFB._addedBlocks = setCriteria(
            pFirst,
            moneyproviderFB.parameters,
            param,
            SqlSyntax.LessThan,
            moneyproviderFB._addedBlocks);
      } else {
        moneyproviderFB._addedBlocks = setCriteria(
            pFirst,
            moneyproviderFB.parameters,
            param,
            SqlSyntax.GreaterThanOrEquals,
            moneyproviderFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        moneyproviderFB._addedBlocks = setCriteria(
            pLast,
            moneyproviderFB.parameters,
            param,
            SqlSyntax.GreaterThan,
            moneyproviderFB._addedBlocks);
      } else {
        moneyproviderFB._addedBlocks = setCriteria(
            pLast,
            moneyproviderFB.parameters,
            param,
            SqlSyntax.LessThanOrEquals,
            moneyproviderFB._addedBlocks);
      }
    }
    _waitingNot = '';
    moneyproviderFB._addedBlocks.needEndBlock![moneyproviderFB._blockIndex] =
        moneyproviderFB._addedBlocks.retVal;
    return moneyproviderFB;
  }

  MoneyProviderFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    moneyproviderFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, moneyproviderFB.parameters, param,
            SqlSyntax.GreaterThan, moneyproviderFB._addedBlocks)
        : setCriteria(pValue, moneyproviderFB.parameters, param,
            SqlSyntax.LessThanOrEquals, moneyproviderFB._addedBlocks);
    _waitingNot = '';
    moneyproviderFB._addedBlocks.needEndBlock![moneyproviderFB._blockIndex] =
        moneyproviderFB._addedBlocks.retVal;
    return moneyproviderFB;
  }

  MoneyProviderFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    moneyproviderFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, moneyproviderFB.parameters, param,
            SqlSyntax.LessThan, moneyproviderFB._addedBlocks)
        : setCriteria(pValue, moneyproviderFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, moneyproviderFB._addedBlocks);
    _waitingNot = '';
    moneyproviderFB._addedBlocks.needEndBlock![moneyproviderFB._blockIndex] =
        moneyproviderFB._addedBlocks.retVal;
    return moneyproviderFB;
  }

  MoneyProviderFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    moneyproviderFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, moneyproviderFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, moneyproviderFB._addedBlocks)
        : setCriteria(pValue, moneyproviderFB.parameters, param,
            SqlSyntax.LessThan, moneyproviderFB._addedBlocks);
    _waitingNot = '';
    moneyproviderFB._addedBlocks.needEndBlock![moneyproviderFB._blockIndex] =
        moneyproviderFB._addedBlocks.retVal;
    return moneyproviderFB;
  }

  MoneyProviderFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    moneyproviderFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, moneyproviderFB.parameters, param,
            SqlSyntax.LessThanOrEquals, moneyproviderFB._addedBlocks)
        : setCriteria(pValue, moneyproviderFB.parameters, param,
            SqlSyntax.GreaterThan, moneyproviderFB._addedBlocks);
    _waitingNot = '';
    moneyproviderFB._addedBlocks.needEndBlock![moneyproviderFB._blockIndex] =
        moneyproviderFB._addedBlocks.retVal;
    return moneyproviderFB;
  }

  MoneyProviderFilterBuilder inValues(dynamic pValue) {
    moneyproviderFB._addedBlocks = setCriteria(
        pValue,
        moneyproviderFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        moneyproviderFB._addedBlocks);
    _waitingNot = '';
    moneyproviderFB._addedBlocks.needEndBlock![moneyproviderFB._blockIndex] =
        moneyproviderFB._addedBlocks.retVal;
    return moneyproviderFB;
  }
}
// endregion MoneyProviderField

// region MoneyProviderFilterBuilder
class MoneyProviderFilterBuilder extends SearchCriteria {
  MoneyProviderFilterBuilder(MoneyProvider obj) {
    whereString = '';
    groupByList = <String>[];
    _addedBlocks.needEndBlock!.add(false);
    _addedBlocks.waitingStartBlock!.add(false);
    _obj = obj;
  }
  AddedBlocks _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
  int _blockIndex = 0;
  List<DbParameter> parameters = <DbParameter>[];
  List<String> orderByList = <String>[];
  MoneyProvider? _obj;
  QueryParams qparams = QueryParams();
  int _pagesize = 0;
  int _page = 0;

  /// put the sql keyword 'AND'
  MoneyProviderFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  MoneyProviderFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  MoneyProviderFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock!.add(true);
    _addedBlocks.needEndBlock!.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock![_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  MoneyProviderFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock![_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  MoneyProviderFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  MoneyProviderFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  MoneyProviderFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock![_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock!.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock!.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  MoneyProviderFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  MoneyProviderFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  MoneyProviderFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  MoneyProviderFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  MoneyProviderField setField(
      MoneyProviderField? field, String colName, DbType dbtype) {
    return MoneyProviderField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock![_blockIndex]);
  }

  MoneyProviderField? _id;
  MoneyProviderField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  MoneyProviderField? _title;
  MoneyProviderField get title {
    return _title = setField(_title, 'title', DbType.text);
  }

  MoneyProviderField? _description;
  MoneyProviderField get description {
    return _description = setField(_description, 'description', DbType.text);
  }

  MoneyProviderField? _isDeleted;
  MoneyProviderField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted = false;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text || param.value[0] is String
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName!)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName!);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (MoneyProvider._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<MoneyProvider> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult(success: false);
    // Delete sub records where in (Transactions) according to DeleteRule.CASCADE
    final idListTransactionsBYid_money_provider = toListPrimaryKeySQL(false);
    final resTransactionsBYid_money_provider = await Transactions()
        .select()
        .where(
            'id_money_provider IN (${idListTransactionsBYid_money_provider['sql']})',
            parameterValue: idListTransactionsBYid_money_provider['args'])
        .delete(hardDelete);
    if (!resTransactionsBYid_money_provider.success) {
      return resTransactionsBYid_money_provider;
    }

    if (MoneyProvider._softDeleteActivated && !hardDelete) {
      r = await _obj!._mnMoneyProvider.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj!._mnMoneyProvider.delete(qparams);
    }
    return r;
  }

  /// Recover List<MoneyProvider> bulk by query
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover MoneyProvider bulk invoked');
    // Recover sub records where in (Transactions) according to DeleteRule.CASCADE
    final idListTransactionsBYid_money_provider = toListPrimaryKeySQL(false);
    final resTransactionsBYid_money_provider = await Transactions()
        .select()
        .where(
            'id_money_provider IN (${idListTransactionsBYid_money_provider['sql']})',
            parameterValue: idListTransactionsBYid_money_provider['args'])
        .update({'isDeleted': 0});
    if (!resTransactionsBYid_money_provider.success) {
      return resTransactionsBYid_money_provider;
    }
    return _obj!._mnMoneyProvider.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from money_provider ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj!._mnMoneyProvider.updateBatch(qparams, values);
  }

  /// This method always returns MoneyProvider Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<MoneyProvider>
  Future<MoneyProvider?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj!._mnMoneyProvider.toList(qparams);
    final data = await objFuture;
    MoneyProvider? obj;
    if (data.isNotEmpty) {
      obj = MoneyProvider.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('money_provider.plTransactionses') && */ (preloadFields ==
                null ||
            preloadFields.contains('plTransactionses'))) {
          /*_loadedfields!.add('money_provider.plTransactionses'); */
          obj.plTransactionses = obj.plTransactionses ??
              await obj.getTransactionses()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [MoneyProvider]
  ///
  /// <returns>int
  Future<int> toCount(
      [VoidCallback Function(int c)? moneyproviderCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final moneyprovidersFuture = await _obj!._mnMoneyProvider.toList(qparams);
    final int count = moneyprovidersFuture[0]['CNT'] as int;
    if (moneyproviderCount != null) {
      moneyproviderCount(count);
    }
    return count;
  }

  /// This method returns List<MoneyProvider> [MoneyProvider]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<MoneyProvider>
  Future<List<MoneyProvider>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<MoneyProvider> moneyprovidersData =
        await MoneyProvider.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return moneyprovidersData;
  }

  /// This method returns Json String [MoneyProvider]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [MoneyProvider]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [MoneyProvider]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj!._mnMoneyProvider.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [MoneyProvider]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM money_provider WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj!._mnMoneyProvider.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [MoneyProvider]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj!._mnMoneyProvider.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await MoneyProvider.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    _buildParameters();

    final objectFuture = _obj!._mnMoneyProvider.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion MoneyProviderFilterBuilder

// region MoneyProviderFields
class MoneyProviderFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fTitle;
  static TableField get title {
    return _fTitle =
        _fTitle ?? SqlSyntax.setField(_fTitle, 'title', DbType.text);
  }

  static TableField? _fDescription;
  static TableField get description {
    return _fDescription = _fDescription ??
        SqlSyntax.setField(_fDescription, 'description', DbType.text);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion MoneyProviderFields

//region MoneyProviderManager
class MoneyProviderManager extends SqfEntityProvider {
  MoneyProviderManager()
      : super(MyDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'money_provider';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion MoneyProviderManager
// region Balance_per_month
class Balance_per_month {
  Balance_per_month({this.id, this.balance, this.was_successfully}) {
    _setDefaultValues();
  }
  Balance_per_month.withFields(this.balance, this.was_successfully) {
    _setDefaultValues();
  }
  Balance_per_month.withId(this.id, this.balance, this.was_successfully) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Balance_per_month.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['balance'] != null) {
      balance = double.tryParse(o['balance'].toString());
    }
    if (o['was_successfully'] != null) {
      was_successfully = o['was_successfully'].toString() == '1' ||
          o['was_successfully'].toString() == 'true';
    }
  }
  // FIELDS (Balance_per_month)
  int? id;
  double? balance;
  bool? was_successfully;

  BoolResult? saveResult;
  // end FIELDS (Balance_per_month)

// COLLECTIONS & VIRTUALS (Balance_per_month)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plBalance_per_weeks', 'plField2'..]) or so on..
  List<Balance_per_week>? plBalance_per_weeks;

  /// get Balance_per_week(s) filtered by id=id_balance_per_month
  Balance_per_weekFilterBuilder? getBalance_per_weeks(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Balance_per_week()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .id_balance_per_month
        .equals(id)
        .and;
  }

  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plBuying_lists', 'plField2'..]) or so on..
  List<Buying_list>? plBuying_lists;

  /// get Buying_list(s) filtered by id=id_balance_per_month
  Buying_listFilterBuilder? getBuying_lists(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Buying_list()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .id_balance_per_month
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Balance_per_month)

  static const bool _softDeleteActivated = false;
  Balance_per_monthManager? __mnBalance_per_month;

  Balance_per_monthManager get _mnBalance_per_month {
    return __mnBalance_per_month =
        __mnBalance_per_month ?? Balance_per_monthManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (balance != null) {
      map['balance'] = balance;
    }

    if (was_successfully != null) {
      map['was_successfully'] =
          forQuery ? (was_successfully! ? 1 : 0) : was_successfully;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (balance != null) {
      map['balance'] = balance;
    }

    if (was_successfully != null) {
      map['was_successfully'] =
          forQuery ? (was_successfully! ? 1 : 0) : was_successfully;
    }

// COLLECTIONS (Balance_per_month)
    if (!forQuery) {
      map['Balance_per_weeks'] = await getBalance_per_weeks()!.toMapList();
    }
    if (!forQuery) {
      map['Buying_lists'] = await getBuying_lists()!.toMapList();
    }
// END COLLECTIONS (Balance_per_month)

    return map;
  }

  /// This method returns Json String [Balance_per_month]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Balance_per_month]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [balance, was_successfully];
  }

  List<dynamic> toArgsWithIds() {
    return [id, balance, was_successfully];
  }

  static Future<List<Balance_per_month>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Balance_per_month.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Balance_per_month>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Balance_per_month>[];
    try {
      objList = list
          .map((balance_per_month) => Balance_per_month.fromMap(
              balance_per_month as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR Balance_per_month.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Balance_per_month>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Balance_per_month> objList = <Balance_per_month>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Balance_per_month.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('balance_per_month.plBalance_per_weeks') && */ (preloadFields ==
                null ||
            preloadFields.contains('plBalance_per_weeks'))) {
          /*_loadedfields!.add('balance_per_month.plBalance_per_weeks'); */
          obj.plBalance_per_weeks = obj.plBalance_per_weeks ??
              await obj.getBalance_per_weeks()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedfields!.contains('balance_per_month.plBuying_lists') && */ (preloadFields ==
                null ||
            preloadFields.contains('plBuying_lists'))) {
          /*_loadedfields!.add('balance_per_month.plBuying_lists'); */
          obj.plBuying_lists = obj.plBuying_lists ??
              await obj.getBuying_lists()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Balance_per_month by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int? id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Balance_per_month if exist, otherwise returns null
  Future<Balance_per_month?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Balance_per_month? obj;
    final data = await _mnBalance_per_month.getById([id]);
    if (data.length != 0) {
      obj = Balance_per_month.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('balance_per_month.plBalance_per_weeks') && */ (preloadFields ==
                null ||
            preloadFields.contains('plBalance_per_weeks'))) {
          /*_loadedfields!.add('balance_per_month.plBalance_per_weeks'); */
          obj.plBalance_per_weeks = obj.plBalance_per_weeks ??
              await obj.getBalance_per_weeks()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedfields!.contains('balance_per_month.plBuying_lists') && */ (preloadFields ==
                null ||
            preloadFields.contains('plBuying_lists'))) {
          /*_loadedfields!.add('balance_per_month.plBuying_lists'); */
          obj.plBuying_lists = obj.plBuying_lists ??
              await obj.getBuying_lists()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Balance_per_month) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int?> save() async {
    if (id == null || id == 0) {
      id = await _mnBalance_per_month.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnBalance_per_month.update(this);
    }

    return id;
  }

  /// saveAs Balance_per_month. Returns a new Primary Key value of Balance_per_month

  /// <returns>Returns a new Primary Key value of Balance_per_month
  Future<int?> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<Balance_per_month> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(
      List<Balance_per_month> balance_per_months) async {
    // final results = _mnBalance_per_month.saveAll('INSERT OR REPLACE INTO balance_per_month (id,balance, was_successfully)  VALUES (?,?,?)',balance_per_months);
    // return results; removed in sqfentity_gen 1.3.0+6
    await MyDbModel().batchStart();
    for (final obj in balance_per_months) {
      await obj.save();
    }
    //    return MyDbModel().batchCommit();
    final result = await MyDbModel().batchCommit();
    for (int i = 0; i < balance_per_months.length; i++) {
      if (balance_per_months[i].id == null) {
        balance_per_months[i].id = result![i] as int;
      }
    }

    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id

  Future<int?> upsert() async {
    try {
      final result = await _mnBalance_per_month.rawInsert(
          'INSERT OR REPLACE INTO balance_per_month (id,balance, was_successfully)  VALUES (?,?,?)',
          [id, balance, was_successfully]);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Balance_per_month id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'Balance_per_month id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage:
              'Balance_per_month Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Balance_per_month>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(
      List<Balance_per_month> balance_per_months) async {
    final results = await _mnBalance_per_month.rawInsertAll(
        'INSERT OR REPLACE INTO balance_per_month (id,balance, was_successfully)  VALUES (?,?,?)',
        balance_per_months);
    return results;
  }

  /// Deletes Balance_per_month

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted

  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Balance_per_month invoked (id=$id)');
    var result = BoolResult(success: false);
    {
      result = await Balance_per_week()
          .select()
          .id_balance_per_month
          .equals(id)
          .and
          .delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    {
      result = await Buying_list()
          .select()
          .id_balance_per_month
          .equals(id)
          .and
          .delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnBalance_per_month
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnBalance_per_month.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  Balance_per_monthFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return Balance_per_monthFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  Balance_per_monthFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return Balance_per_monthFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}
  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion balance_per_month

// region Balance_per_monthField
class Balance_per_monthField extends SearchCriteria {
  Balance_per_monthField(this.balance_per_monthFB);
  // { param = DbParameter(); }
  DbParameter param = DbParameter();
  String _waitingNot = '';
  Balance_per_monthFilterBuilder balance_per_monthFB;

  Balance_per_monthField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  Balance_per_monthFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    balance_per_monthFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, balance_per_monthFB.parameters, param,
            SqlSyntax.EQuals, balance_per_monthFB._addedBlocks)
        : setCriteria(pValue, balance_per_monthFB.parameters, param,
            SqlSyntax.NotEQuals, balance_per_monthFB._addedBlocks);
    _waitingNot = '';
    balance_per_monthFB
            ._addedBlocks.needEndBlock![balance_per_monthFB._blockIndex] =
        balance_per_monthFB._addedBlocks.retVal;
    return balance_per_monthFB;
  }

  Balance_per_monthFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    balance_per_monthFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, balance_per_monthFB.parameters, param,
            SqlSyntax.EQualsOrNull, balance_per_monthFB._addedBlocks)
        : setCriteria(pValue, balance_per_monthFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, balance_per_monthFB._addedBlocks);
    _waitingNot = '';
    balance_per_monthFB
            ._addedBlocks.needEndBlock![balance_per_monthFB._blockIndex] =
        balance_per_monthFB._addedBlocks.retVal;
    return balance_per_monthFB;
  }

  Balance_per_monthFilterBuilder isNull() {
    balance_per_monthFB._addedBlocks = setCriteria(
        0,
        balance_per_monthFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        balance_per_monthFB._addedBlocks);
    _waitingNot = '';
    balance_per_monthFB
            ._addedBlocks.needEndBlock![balance_per_monthFB._blockIndex] =
        balance_per_monthFB._addedBlocks.retVal;
    return balance_per_monthFB;
  }

  Balance_per_monthFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      balance_per_monthFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          balance_per_monthFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          balance_per_monthFB._addedBlocks);
      _waitingNot = '';
      balance_per_monthFB
              ._addedBlocks.needEndBlock![balance_per_monthFB._blockIndex] =
          balance_per_monthFB._addedBlocks.retVal;
    }
    return balance_per_monthFB;
  }

  Balance_per_monthFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      balance_per_monthFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          balance_per_monthFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          balance_per_monthFB._addedBlocks);
      _waitingNot = '';
      balance_per_monthFB
              ._addedBlocks.needEndBlock![balance_per_monthFB._blockIndex] =
          balance_per_monthFB._addedBlocks.retVal;
      balance_per_monthFB
              ._addedBlocks.needEndBlock![balance_per_monthFB._blockIndex] =
          balance_per_monthFB._addedBlocks.retVal;
    }
    return balance_per_monthFB;
  }

  Balance_per_monthFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      balance_per_monthFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          balance_per_monthFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          balance_per_monthFB._addedBlocks);
      _waitingNot = '';
      balance_per_monthFB
              ._addedBlocks.needEndBlock![balance_per_monthFB._blockIndex] =
          balance_per_monthFB._addedBlocks.retVal;
    }
    return balance_per_monthFB;
  }

  Balance_per_monthFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      balance_per_monthFB._addedBlocks = setCriteria(
          pFirst,
          balance_per_monthFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          balance_per_monthFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        balance_per_monthFB._addedBlocks = setCriteria(
            pFirst,
            balance_per_monthFB.parameters,
            param,
            SqlSyntax.LessThan,
            balance_per_monthFB._addedBlocks);
      } else {
        balance_per_monthFB._addedBlocks = setCriteria(
            pFirst,
            balance_per_monthFB.parameters,
            param,
            SqlSyntax.GreaterThanOrEquals,
            balance_per_monthFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        balance_per_monthFB._addedBlocks = setCriteria(
            pLast,
            balance_per_monthFB.parameters,
            param,
            SqlSyntax.GreaterThan,
            balance_per_monthFB._addedBlocks);
      } else {
        balance_per_monthFB._addedBlocks = setCriteria(
            pLast,
            balance_per_monthFB.parameters,
            param,
            SqlSyntax.LessThanOrEquals,
            balance_per_monthFB._addedBlocks);
      }
    }
    _waitingNot = '';
    balance_per_monthFB
            ._addedBlocks.needEndBlock![balance_per_monthFB._blockIndex] =
        balance_per_monthFB._addedBlocks.retVal;
    return balance_per_monthFB;
  }

  Balance_per_monthFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    balance_per_monthFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, balance_per_monthFB.parameters, param,
            SqlSyntax.GreaterThan, balance_per_monthFB._addedBlocks)
        : setCriteria(pValue, balance_per_monthFB.parameters, param,
            SqlSyntax.LessThanOrEquals, balance_per_monthFB._addedBlocks);
    _waitingNot = '';
    balance_per_monthFB
            ._addedBlocks.needEndBlock![balance_per_monthFB._blockIndex] =
        balance_per_monthFB._addedBlocks.retVal;
    return balance_per_monthFB;
  }

  Balance_per_monthFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    balance_per_monthFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, balance_per_monthFB.parameters, param,
            SqlSyntax.LessThan, balance_per_monthFB._addedBlocks)
        : setCriteria(pValue, balance_per_monthFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, balance_per_monthFB._addedBlocks);
    _waitingNot = '';
    balance_per_monthFB
            ._addedBlocks.needEndBlock![balance_per_monthFB._blockIndex] =
        balance_per_monthFB._addedBlocks.retVal;
    return balance_per_monthFB;
  }

  Balance_per_monthFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    balance_per_monthFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, balance_per_monthFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, balance_per_monthFB._addedBlocks)
        : setCriteria(pValue, balance_per_monthFB.parameters, param,
            SqlSyntax.LessThan, balance_per_monthFB._addedBlocks);
    _waitingNot = '';
    balance_per_monthFB
            ._addedBlocks.needEndBlock![balance_per_monthFB._blockIndex] =
        balance_per_monthFB._addedBlocks.retVal;
    return balance_per_monthFB;
  }

  Balance_per_monthFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    balance_per_monthFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, balance_per_monthFB.parameters, param,
            SqlSyntax.LessThanOrEquals, balance_per_monthFB._addedBlocks)
        : setCriteria(pValue, balance_per_monthFB.parameters, param,
            SqlSyntax.GreaterThan, balance_per_monthFB._addedBlocks);
    _waitingNot = '';
    balance_per_monthFB
            ._addedBlocks.needEndBlock![balance_per_monthFB._blockIndex] =
        balance_per_monthFB._addedBlocks.retVal;
    return balance_per_monthFB;
  }

  Balance_per_monthFilterBuilder inValues(dynamic pValue) {
    balance_per_monthFB._addedBlocks = setCriteria(
        pValue,
        balance_per_monthFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        balance_per_monthFB._addedBlocks);
    _waitingNot = '';
    balance_per_monthFB
            ._addedBlocks.needEndBlock![balance_per_monthFB._blockIndex] =
        balance_per_monthFB._addedBlocks.retVal;
    return balance_per_monthFB;
  }
}
// endregion Balance_per_monthField

// region Balance_per_monthFilterBuilder
class Balance_per_monthFilterBuilder extends SearchCriteria {
  Balance_per_monthFilterBuilder(Balance_per_month obj) {
    whereString = '';
    groupByList = <String>[];
    _addedBlocks.needEndBlock!.add(false);
    _addedBlocks.waitingStartBlock!.add(false);
    _obj = obj;
  }
  AddedBlocks _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
  int _blockIndex = 0;
  List<DbParameter> parameters = <DbParameter>[];
  List<String> orderByList = <String>[];
  Balance_per_month? _obj;
  QueryParams qparams = QueryParams();
  int _pagesize = 0;
  int _page = 0;

  /// put the sql keyword 'AND'
  Balance_per_monthFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  Balance_per_monthFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  Balance_per_monthFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock!.add(true);
    _addedBlocks.needEndBlock!.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock![_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  Balance_per_monthFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock![_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  Balance_per_monthFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  Balance_per_monthFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  Balance_per_monthFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock![_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock!.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock!.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  Balance_per_monthFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  Balance_per_monthFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  Balance_per_monthFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  Balance_per_monthFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  Balance_per_monthField setField(
      Balance_per_monthField? field, String colName, DbType dbtype) {
    return Balance_per_monthField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock![_blockIndex]);
  }

  Balance_per_monthField? _id;
  Balance_per_monthField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  Balance_per_monthField? _balance;
  Balance_per_monthField get balance {
    return _balance = setField(_balance, 'balance', DbType.real);
  }

  Balance_per_monthField? _was_successfully;
  Balance_per_monthField get was_successfully {
    return _was_successfully =
        setField(_was_successfully, 'was_successfully', DbType.bool);
  }

  bool _getIsDeleted = false;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text || param.value[0] is String
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName!)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName!);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Balance_per_month._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Balance_per_month> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult(success: false);
    // Delete sub records where in (Balance_per_week) according to DeleteRule.CASCADE
    final idListBalance_per_weekBYid_balance_per_month =
        toListPrimaryKeySQL(false);
    final resBalance_per_weekBYid_balance_per_month = await Balance_per_week()
        .select()
        .where(
            'id_balance_per_month IN (${idListBalance_per_weekBYid_balance_per_month['sql']})',
            parameterValue:
                idListBalance_per_weekBYid_balance_per_month['args'])
        .delete(hardDelete);
    if (!resBalance_per_weekBYid_balance_per_month.success) {
      return resBalance_per_weekBYid_balance_per_month;
    }
// Delete sub records where in (Buying_list) according to DeleteRule.CASCADE
    final idListBuying_listBYid_balance_per_month = toListPrimaryKeySQL(false);
    final resBuying_listBYid_balance_per_month = await Buying_list()
        .select()
        .where(
            'id_balance_per_month IN (${idListBuying_listBYid_balance_per_month['sql']})',
            parameterValue: idListBuying_listBYid_balance_per_month['args'])
        .delete(hardDelete);
    if (!resBuying_listBYid_balance_per_month.success) {
      return resBuying_listBYid_balance_per_month;
    }

    if (Balance_per_month._softDeleteActivated && !hardDelete) {
      r = await _obj!._mnBalance_per_month
          .updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj!._mnBalance_per_month.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from balance_per_month ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj!._mnBalance_per_month.updateBatch(qparams, values);
  }

  /// This method always returns Balance_per_month Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Balance_per_month>
  Future<Balance_per_month?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj!._mnBalance_per_month.toList(qparams);
    final data = await objFuture;
    Balance_per_month? obj;
    if (data.isNotEmpty) {
      obj = Balance_per_month.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('balance_per_month.plBalance_per_weeks') && */ (preloadFields ==
                null ||
            preloadFields.contains('plBalance_per_weeks'))) {
          /*_loadedfields!.add('balance_per_month.plBalance_per_weeks'); */
          obj.plBalance_per_weeks = obj.plBalance_per_weeks ??
              await obj.getBalance_per_weeks()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedfields!.contains('balance_per_month.plBuying_lists') && */ (preloadFields ==
                null ||
            preloadFields.contains('plBuying_lists'))) {
          /*_loadedfields!.add('balance_per_month.plBuying_lists'); */
          obj.plBuying_lists = obj.plBuying_lists ??
              await obj.getBuying_lists()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Balance_per_month]
  ///
  /// <returns>int
  Future<int> toCount(
      [VoidCallback Function(int c)? balance_per_monthCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final balance_per_monthsFuture =
        await _obj!._mnBalance_per_month.toList(qparams);
    final int count = balance_per_monthsFuture[0]['CNT'] as int;
    if (balance_per_monthCount != null) {
      balance_per_monthCount(count);
    }
    return count;
  }

  /// This method returns List<Balance_per_month> [Balance_per_month]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Balance_per_month>
  Future<List<Balance_per_month>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Balance_per_month> balance_per_monthsData =
        await Balance_per_month.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return balance_per_monthsData;
  }

  /// This method returns Json String [Balance_per_month]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Balance_per_month]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Balance_per_month]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj!._mnBalance_per_month.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Balance_per_month]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM balance_per_month WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj!._mnBalance_per_month.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Balance_per_month]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj!._mnBalance_per_month.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Balance_per_month.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    _buildParameters();

    final objectFuture = _obj!._mnBalance_per_month.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion Balance_per_monthFilterBuilder

// region Balance_per_monthFields
class Balance_per_monthFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fBalance;
  static TableField get balance {
    return _fBalance =
        _fBalance ?? SqlSyntax.setField(_fBalance, 'balance', DbType.real);
  }

  static TableField? _fWas_successfully;
  static TableField get was_successfully {
    return _fWas_successfully = _fWas_successfully ??
        SqlSyntax.setField(_fWas_successfully, 'was_successfully', DbType.bool);
  }
}
// endregion Balance_per_monthFields

//region Balance_per_monthManager
class Balance_per_monthManager extends SqfEntityProvider {
  Balance_per_monthManager()
      : super(MyDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'balance_per_month';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion Balance_per_monthManager
// region Balance_per_week
class Balance_per_week {
  Balance_per_week(
      {this.id,
      this.balance,
      this.was_successfully,
      this.id_balance_per_month}) {
    _setDefaultValues();
  }
  Balance_per_week.withFields(
      this.balance, this.was_successfully, this.id_balance_per_month) {
    _setDefaultValues();
  }
  Balance_per_week.withId(
      this.id, this.balance, this.was_successfully, this.id_balance_per_month) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Balance_per_week.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['balance'] != null) {
      balance = double.tryParse(o['balance'].toString());
    }
    if (o['was_successfully'] != null) {
      was_successfully = o['was_successfully'].toString() == '1' ||
          o['was_successfully'].toString() == 'true';
    }
    id_balance_per_month = int.tryParse(o['id_balance_per_month'].toString());

    // RELATIONSHIPS FromMAP
    plBalance_per_month = o['balance_per_month'] != null
        ? Balance_per_month.fromMap(
            o['balance_per_month'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (Balance_per_week)
  int? id;
  double? balance;
  bool? was_successfully;
  int? id_balance_per_month;

  BoolResult? saveResult;
  // end FIELDS (Balance_per_week)

// RELATIONSHIPS (Balance_per_week)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plBalance_per_month', 'plField2'..]) or so on..
  Balance_per_month? plBalance_per_month;

  /// get Balance_per_month By Id_balance_per_month
  Future<Balance_per_month?> getBalance_per_month(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Balance_per_month().getById(id_balance_per_month,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (Balance_per_week)

// COLLECTIONS & VIRTUALS (Balance_per_week)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plBalance_per_daies', 'plField2'..]) or so on..
  List<Balance_per_day>? plBalance_per_daies;

  /// get Balance_per_day(s) filtered by id=id_balance_per_week
  Balance_per_dayFilterBuilder? getBalance_per_daies(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Balance_per_day()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .id_balance_per_week
        .equals(id)
        .and;
  }

  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plBuying_lists', 'plField2'..]) or so on..
  List<Buying_list>? plBuying_lists;

  /// get Buying_list(s) filtered by id=id_balance_per_week
  Buying_listFilterBuilder? getBuying_lists(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Buying_list()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .id_balance_per_week
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Balance_per_week)

  static const bool _softDeleteActivated = false;
  Balance_per_weekManager? __mnBalance_per_week;

  Balance_per_weekManager get _mnBalance_per_week {
    return __mnBalance_per_week =
        __mnBalance_per_week ?? Balance_per_weekManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (balance != null) {
      map['balance'] = balance;
    }

    if (was_successfully != null) {
      map['was_successfully'] =
          forQuery ? (was_successfully! ? 1 : 0) : was_successfully;
    }

    if (id_balance_per_month != null) {
      map['id_balance_per_month'] = forView
          ? plBalance_per_month == null
              ? id_balance_per_month
              : plBalance_per_month!.id
          : id_balance_per_month;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (balance != null) {
      map['balance'] = balance;
    }

    if (was_successfully != null) {
      map['was_successfully'] =
          forQuery ? (was_successfully! ? 1 : 0) : was_successfully;
    }

    if (id_balance_per_month != null) {
      map['id_balance_per_month'] = forView
          ? plBalance_per_month == null
              ? id_balance_per_month
              : plBalance_per_month!.id
          : id_balance_per_month;
    }

// COLLECTIONS (Balance_per_week)
    if (!forQuery) {
      map['Balance_per_daies'] = await getBalance_per_daies()!.toMapList();
    }
    if (!forQuery) {
      map['Buying_lists'] = await getBuying_lists()!.toMapList();
    }
// END COLLECTIONS (Balance_per_week)

    return map;
  }

  /// This method returns Json String [Balance_per_week]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Balance_per_week]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [balance, was_successfully, id_balance_per_month];
  }

  List<dynamic> toArgsWithIds() {
    return [id, balance, was_successfully, id_balance_per_month];
  }

  static Future<List<Balance_per_week>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Balance_per_week.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Balance_per_week>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Balance_per_week>[];
    try {
      objList = list
          .map((balance_per_week) => Balance_per_week.fromMap(
              balance_per_week as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR Balance_per_week.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Balance_per_week>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Balance_per_week> objList = <Balance_per_week>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Balance_per_week.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('balance_per_week.plBalance_per_daies') && */ (preloadFields ==
                null ||
            preloadFields.contains('plBalance_per_daies'))) {
          /*_loadedfields!.add('balance_per_week.plBalance_per_daies'); */
          obj.plBalance_per_daies = obj.plBalance_per_daies ??
              await obj.getBalance_per_daies()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedfields!.contains('balance_per_week.plBuying_lists') && */ (preloadFields ==
                null ||
            preloadFields.contains('plBuying_lists'))) {
          /*_loadedfields!.add('balance_per_week.plBuying_lists'); */
          obj.plBuying_lists = obj.plBuying_lists ??
              await obj.getBuying_lists()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('balance_per_month.plBalance_per_month') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plBalance_per_month'))) {
          /*_loadedfields!.add('balance_per_month.plBalance_per_month');*/
          obj.plBalance_per_month = obj.plBalance_per_month ??
              await obj.getBalance_per_month(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Balance_per_week by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int? id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Balance_per_week if exist, otherwise returns null
  Future<Balance_per_week?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Balance_per_week? obj;
    final data = await _mnBalance_per_week.getById([id]);
    if (data.length != 0) {
      obj = Balance_per_week.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('balance_per_week.plBalance_per_daies') && */ (preloadFields ==
                null ||
            preloadFields.contains('plBalance_per_daies'))) {
          /*_loadedfields!.add('balance_per_week.plBalance_per_daies'); */
          obj.plBalance_per_daies = obj.plBalance_per_daies ??
              await obj.getBalance_per_daies()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedfields!.contains('balance_per_week.plBuying_lists') && */ (preloadFields ==
                null ||
            preloadFields.contains('plBuying_lists'))) {
          /*_loadedfields!.add('balance_per_week.plBuying_lists'); */
          obj.plBuying_lists = obj.plBuying_lists ??
              await obj.getBuying_lists()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('balance_per_month.plBalance_per_month') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plBalance_per_month'))) {
          /*_loadedfields!.add('balance_per_month.plBalance_per_month');*/
          obj.plBalance_per_month = obj.plBalance_per_month ??
              await obj.getBalance_per_month(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Balance_per_week) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int?> save() async {
    if (id == null || id == 0) {
      id = await _mnBalance_per_week.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnBalance_per_week.update(this);
    }

    return id;
  }

  /// saveAs Balance_per_week. Returns a new Primary Key value of Balance_per_week

  /// <returns>Returns a new Primary Key value of Balance_per_week
  Future<int?> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<Balance_per_week> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(
      List<Balance_per_week> balance_per_weeks) async {
    // final results = _mnBalance_per_week.saveAll('INSERT OR REPLACE INTO balance_per_week (id,balance, was_successfully, id_balance_per_month)  VALUES (?,?,?,?)',balance_per_weeks);
    // return results; removed in sqfentity_gen 1.3.0+6
    await MyDbModel().batchStart();
    for (final obj in balance_per_weeks) {
      await obj.save();
    }
    //    return MyDbModel().batchCommit();
    final result = await MyDbModel().batchCommit();
    for (int i = 0; i < balance_per_weeks.length; i++) {
      if (balance_per_weeks[i].id == null) {
        balance_per_weeks[i].id = result![i] as int;
      }
    }

    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id

  Future<int?> upsert() async {
    try {
      final result = await _mnBalance_per_week.rawInsert(
          'INSERT OR REPLACE INTO balance_per_week (id,balance, was_successfully, id_balance_per_month)  VALUES (?,?,?,?)',
          [id, balance, was_successfully, id_balance_per_month]);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Balance_per_week id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'Balance_per_week id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Balance_per_week Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Balance_per_week>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(
      List<Balance_per_week> balance_per_weeks) async {
    final results = await _mnBalance_per_week.rawInsertAll(
        'INSERT OR REPLACE INTO balance_per_week (id,balance, was_successfully, id_balance_per_month)  VALUES (?,?,?,?)',
        balance_per_weeks);
    return results;
  }

  /// Deletes Balance_per_week

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted

  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Balance_per_week invoked (id=$id)');
    var result = BoolResult(success: false);
    {
      result = await Balance_per_day()
          .select()
          .id_balance_per_week
          .equals(id)
          .and
          .delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    {
      result = await Buying_list()
          .select()
          .id_balance_per_week
          .equals(id)
          .and
          .delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnBalance_per_week
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnBalance_per_week.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  Balance_per_weekFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return Balance_per_weekFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  Balance_per_weekFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return Balance_per_weekFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}
  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion balance_per_week

// region Balance_per_weekField
class Balance_per_weekField extends SearchCriteria {
  Balance_per_weekField(this.balance_per_weekFB);
  // { param = DbParameter(); }
  DbParameter param = DbParameter();
  String _waitingNot = '';
  Balance_per_weekFilterBuilder balance_per_weekFB;

  Balance_per_weekField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  Balance_per_weekFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    balance_per_weekFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, balance_per_weekFB.parameters, param,
            SqlSyntax.EQuals, balance_per_weekFB._addedBlocks)
        : setCriteria(pValue, balance_per_weekFB.parameters, param,
            SqlSyntax.NotEQuals, balance_per_weekFB._addedBlocks);
    _waitingNot = '';
    balance_per_weekFB
            ._addedBlocks.needEndBlock![balance_per_weekFB._blockIndex] =
        balance_per_weekFB._addedBlocks.retVal;
    return balance_per_weekFB;
  }

  Balance_per_weekFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    balance_per_weekFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, balance_per_weekFB.parameters, param,
            SqlSyntax.EQualsOrNull, balance_per_weekFB._addedBlocks)
        : setCriteria(pValue, balance_per_weekFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, balance_per_weekFB._addedBlocks);
    _waitingNot = '';
    balance_per_weekFB
            ._addedBlocks.needEndBlock![balance_per_weekFB._blockIndex] =
        balance_per_weekFB._addedBlocks.retVal;
    return balance_per_weekFB;
  }

  Balance_per_weekFilterBuilder isNull() {
    balance_per_weekFB._addedBlocks = setCriteria(
        0,
        balance_per_weekFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        balance_per_weekFB._addedBlocks);
    _waitingNot = '';
    balance_per_weekFB
            ._addedBlocks.needEndBlock![balance_per_weekFB._blockIndex] =
        balance_per_weekFB._addedBlocks.retVal;
    return balance_per_weekFB;
  }

  Balance_per_weekFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      balance_per_weekFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          balance_per_weekFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          balance_per_weekFB._addedBlocks);
      _waitingNot = '';
      balance_per_weekFB
              ._addedBlocks.needEndBlock![balance_per_weekFB._blockIndex] =
          balance_per_weekFB._addedBlocks.retVal;
    }
    return balance_per_weekFB;
  }

  Balance_per_weekFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      balance_per_weekFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          balance_per_weekFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          balance_per_weekFB._addedBlocks);
      _waitingNot = '';
      balance_per_weekFB
              ._addedBlocks.needEndBlock![balance_per_weekFB._blockIndex] =
          balance_per_weekFB._addedBlocks.retVal;
      balance_per_weekFB
              ._addedBlocks.needEndBlock![balance_per_weekFB._blockIndex] =
          balance_per_weekFB._addedBlocks.retVal;
    }
    return balance_per_weekFB;
  }

  Balance_per_weekFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      balance_per_weekFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          balance_per_weekFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          balance_per_weekFB._addedBlocks);
      _waitingNot = '';
      balance_per_weekFB
              ._addedBlocks.needEndBlock![balance_per_weekFB._blockIndex] =
          balance_per_weekFB._addedBlocks.retVal;
    }
    return balance_per_weekFB;
  }

  Balance_per_weekFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      balance_per_weekFB._addedBlocks = setCriteria(
          pFirst,
          balance_per_weekFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          balance_per_weekFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        balance_per_weekFB._addedBlocks = setCriteria(
            pFirst,
            balance_per_weekFB.parameters,
            param,
            SqlSyntax.LessThan,
            balance_per_weekFB._addedBlocks);
      } else {
        balance_per_weekFB._addedBlocks = setCriteria(
            pFirst,
            balance_per_weekFB.parameters,
            param,
            SqlSyntax.GreaterThanOrEquals,
            balance_per_weekFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        balance_per_weekFB._addedBlocks = setCriteria(
            pLast,
            balance_per_weekFB.parameters,
            param,
            SqlSyntax.GreaterThan,
            balance_per_weekFB._addedBlocks);
      } else {
        balance_per_weekFB._addedBlocks = setCriteria(
            pLast,
            balance_per_weekFB.parameters,
            param,
            SqlSyntax.LessThanOrEquals,
            balance_per_weekFB._addedBlocks);
      }
    }
    _waitingNot = '';
    balance_per_weekFB
            ._addedBlocks.needEndBlock![balance_per_weekFB._blockIndex] =
        balance_per_weekFB._addedBlocks.retVal;
    return balance_per_weekFB;
  }

  Balance_per_weekFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    balance_per_weekFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, balance_per_weekFB.parameters, param,
            SqlSyntax.GreaterThan, balance_per_weekFB._addedBlocks)
        : setCriteria(pValue, balance_per_weekFB.parameters, param,
            SqlSyntax.LessThanOrEquals, balance_per_weekFB._addedBlocks);
    _waitingNot = '';
    balance_per_weekFB
            ._addedBlocks.needEndBlock![balance_per_weekFB._blockIndex] =
        balance_per_weekFB._addedBlocks.retVal;
    return balance_per_weekFB;
  }

  Balance_per_weekFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    balance_per_weekFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, balance_per_weekFB.parameters, param,
            SqlSyntax.LessThan, balance_per_weekFB._addedBlocks)
        : setCriteria(pValue, balance_per_weekFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, balance_per_weekFB._addedBlocks);
    _waitingNot = '';
    balance_per_weekFB
            ._addedBlocks.needEndBlock![balance_per_weekFB._blockIndex] =
        balance_per_weekFB._addedBlocks.retVal;
    return balance_per_weekFB;
  }

  Balance_per_weekFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    balance_per_weekFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, balance_per_weekFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, balance_per_weekFB._addedBlocks)
        : setCriteria(pValue, balance_per_weekFB.parameters, param,
            SqlSyntax.LessThan, balance_per_weekFB._addedBlocks);
    _waitingNot = '';
    balance_per_weekFB
            ._addedBlocks.needEndBlock![balance_per_weekFB._blockIndex] =
        balance_per_weekFB._addedBlocks.retVal;
    return balance_per_weekFB;
  }

  Balance_per_weekFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    balance_per_weekFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, balance_per_weekFB.parameters, param,
            SqlSyntax.LessThanOrEquals, balance_per_weekFB._addedBlocks)
        : setCriteria(pValue, balance_per_weekFB.parameters, param,
            SqlSyntax.GreaterThan, balance_per_weekFB._addedBlocks);
    _waitingNot = '';
    balance_per_weekFB
            ._addedBlocks.needEndBlock![balance_per_weekFB._blockIndex] =
        balance_per_weekFB._addedBlocks.retVal;
    return balance_per_weekFB;
  }

  Balance_per_weekFilterBuilder inValues(dynamic pValue) {
    balance_per_weekFB._addedBlocks = setCriteria(
        pValue,
        balance_per_weekFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        balance_per_weekFB._addedBlocks);
    _waitingNot = '';
    balance_per_weekFB
            ._addedBlocks.needEndBlock![balance_per_weekFB._blockIndex] =
        balance_per_weekFB._addedBlocks.retVal;
    return balance_per_weekFB;
  }
}
// endregion Balance_per_weekField

// region Balance_per_weekFilterBuilder
class Balance_per_weekFilterBuilder extends SearchCriteria {
  Balance_per_weekFilterBuilder(Balance_per_week obj) {
    whereString = '';
    groupByList = <String>[];
    _addedBlocks.needEndBlock!.add(false);
    _addedBlocks.waitingStartBlock!.add(false);
    _obj = obj;
  }
  AddedBlocks _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
  int _blockIndex = 0;
  List<DbParameter> parameters = <DbParameter>[];
  List<String> orderByList = <String>[];
  Balance_per_week? _obj;
  QueryParams qparams = QueryParams();
  int _pagesize = 0;
  int _page = 0;

  /// put the sql keyword 'AND'
  Balance_per_weekFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  Balance_per_weekFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  Balance_per_weekFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock!.add(true);
    _addedBlocks.needEndBlock!.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock![_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  Balance_per_weekFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock![_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  Balance_per_weekFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  Balance_per_weekFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  Balance_per_weekFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock![_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock!.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock!.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  Balance_per_weekFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  Balance_per_weekFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  Balance_per_weekFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  Balance_per_weekFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  Balance_per_weekField setField(
      Balance_per_weekField? field, String colName, DbType dbtype) {
    return Balance_per_weekField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock![_blockIndex]);
  }

  Balance_per_weekField? _id;
  Balance_per_weekField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  Balance_per_weekField? _balance;
  Balance_per_weekField get balance {
    return _balance = setField(_balance, 'balance', DbType.real);
  }

  Balance_per_weekField? _was_successfully;
  Balance_per_weekField get was_successfully {
    return _was_successfully =
        setField(_was_successfully, 'was_successfully', DbType.bool);
  }

  Balance_per_weekField? _id_balance_per_month;
  Balance_per_weekField get id_balance_per_month {
    return _id_balance_per_month =
        setField(_id_balance_per_month, 'id_balance_per_month', DbType.integer);
  }

  bool _getIsDeleted = false;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text || param.value[0] is String
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName!)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName!);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Balance_per_week._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Balance_per_week> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult(success: false);
    // Delete sub records where in (Balance_per_day) according to DeleteRule.CASCADE
    final idListBalance_per_dayBYid_balance_per_week =
        toListPrimaryKeySQL(false);
    final resBalance_per_dayBYid_balance_per_week = await Balance_per_day()
        .select()
        .where(
            'id_balance_per_week IN (${idListBalance_per_dayBYid_balance_per_week['sql']})',
            parameterValue: idListBalance_per_dayBYid_balance_per_week['args'])
        .delete(hardDelete);
    if (!resBalance_per_dayBYid_balance_per_week.success) {
      return resBalance_per_dayBYid_balance_per_week;
    }
// Delete sub records where in (Buying_list) according to DeleteRule.CASCADE
    final idListBuying_listBYid_balance_per_week = toListPrimaryKeySQL(false);
    final resBuying_listBYid_balance_per_week = await Buying_list()
        .select()
        .where(
            'id_balance_per_week IN (${idListBuying_listBYid_balance_per_week['sql']})',
            parameterValue: idListBuying_listBYid_balance_per_week['args'])
        .delete(hardDelete);
    if (!resBuying_listBYid_balance_per_week.success) {
      return resBuying_listBYid_balance_per_week;
    }

    if (Balance_per_week._softDeleteActivated && !hardDelete) {
      r = await _obj!._mnBalance_per_week
          .updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj!._mnBalance_per_week.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from balance_per_week ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj!._mnBalance_per_week.updateBatch(qparams, values);
  }

  /// This method always returns Balance_per_week Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Balance_per_week>
  Future<Balance_per_week?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj!._mnBalance_per_week.toList(qparams);
    final data = await objFuture;
    Balance_per_week? obj;
    if (data.isNotEmpty) {
      obj = Balance_per_week.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('balance_per_week.plBalance_per_daies') && */ (preloadFields ==
                null ||
            preloadFields.contains('plBalance_per_daies'))) {
          /*_loadedfields!.add('balance_per_week.plBalance_per_daies'); */
          obj.plBalance_per_daies = obj.plBalance_per_daies ??
              await obj.getBalance_per_daies()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedfields!.contains('balance_per_week.plBuying_lists') && */ (preloadFields ==
                null ||
            preloadFields.contains('plBuying_lists'))) {
          /*_loadedfields!.add('balance_per_week.plBuying_lists'); */
          obj.plBuying_lists = obj.plBuying_lists ??
              await obj.getBuying_lists()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('balance_per_month.plBalance_per_month') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plBalance_per_month'))) {
          /*_loadedfields!.add('balance_per_month.plBalance_per_month');*/
          obj.plBalance_per_month = obj.plBalance_per_month ??
              await obj.getBalance_per_month(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Balance_per_week]
  ///
  /// <returns>int
  Future<int> toCount(
      [VoidCallback Function(int c)? balance_per_weekCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final balance_per_weeksFuture =
        await _obj!._mnBalance_per_week.toList(qparams);
    final int count = balance_per_weeksFuture[0]['CNT'] as int;
    if (balance_per_weekCount != null) {
      balance_per_weekCount(count);
    }
    return count;
  }

  /// This method returns List<Balance_per_week> [Balance_per_week]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Balance_per_week>
  Future<List<Balance_per_week>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Balance_per_week> balance_per_weeksData =
        await Balance_per_week.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return balance_per_weeksData;
  }

  /// This method returns Json String [Balance_per_week]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Balance_per_week]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Balance_per_week]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj!._mnBalance_per_week.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Balance_per_week]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM balance_per_week WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj!._mnBalance_per_week.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Balance_per_week]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj!._mnBalance_per_week.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Balance_per_week.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    _buildParameters();

    final objectFuture = _obj!._mnBalance_per_week.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion Balance_per_weekFilterBuilder

// region Balance_per_weekFields
class Balance_per_weekFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fBalance;
  static TableField get balance {
    return _fBalance =
        _fBalance ?? SqlSyntax.setField(_fBalance, 'balance', DbType.real);
  }

  static TableField? _fWas_successfully;
  static TableField get was_successfully {
    return _fWas_successfully = _fWas_successfully ??
        SqlSyntax.setField(_fWas_successfully, 'was_successfully', DbType.bool);
  }

  static TableField? _fId_balance_per_month;
  static TableField get id_balance_per_month {
    return _fId_balance_per_month = _fId_balance_per_month ??
        SqlSyntax.setField(
            _fId_balance_per_month, 'id_balance_per_month', DbType.integer);
  }
}
// endregion Balance_per_weekFields

//region Balance_per_weekManager
class Balance_per_weekManager extends SqfEntityProvider {
  Balance_per_weekManager()
      : super(MyDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'balance_per_week';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion Balance_per_weekManager
// region Balance_per_day
class Balance_per_day {
  Balance_per_day(
      {this.id,
      this.balance,
      this.was_successfully,
      this.id_balance_per_week}) {
    _setDefaultValues();
  }
  Balance_per_day.withFields(
      this.balance, this.was_successfully, this.id_balance_per_week) {
    _setDefaultValues();
  }
  Balance_per_day.withId(
      this.id, this.balance, this.was_successfully, this.id_balance_per_week) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Balance_per_day.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['balance'] != null) {
      balance = double.tryParse(o['balance'].toString());
    }
    if (o['was_successfully'] != null) {
      was_successfully = o['was_successfully'].toString() == '1' ||
          o['was_successfully'].toString() == 'true';
    }
    id_balance_per_week = int.tryParse(o['id_balance_per_week'].toString());

    // RELATIONSHIPS FromMAP
    plBalance_per_week = o['balance_per_week'] != null
        ? Balance_per_week.fromMap(
            o['balance_per_week'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (Balance_per_day)
  int? id;
  double? balance;
  bool? was_successfully;
  int? id_balance_per_week;

  BoolResult? saveResult;
  // end FIELDS (Balance_per_day)

// RELATIONSHIPS (Balance_per_day)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plBalance_per_week', 'plField2'..]) or so on..
  Balance_per_week? plBalance_per_week;

  /// get Balance_per_week By Id_balance_per_week
  Future<Balance_per_week?> getBalance_per_week(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Balance_per_week().getById(id_balance_per_week,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (Balance_per_day)

// COLLECTIONS & VIRTUALS (Balance_per_day)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plBuying_lists', 'plField2'..]) or so on..
  List<Buying_list>? plBuying_lists;

  /// get Buying_list(s) filtered by id=id_balance_per_day
  Buying_listFilterBuilder? getBuying_lists(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Buying_list()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .id_balance_per_day
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Balance_per_day)

  static const bool _softDeleteActivated = false;
  Balance_per_dayManager? __mnBalance_per_day;

  Balance_per_dayManager get _mnBalance_per_day {
    return __mnBalance_per_day =
        __mnBalance_per_day ?? Balance_per_dayManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (balance != null) {
      map['balance'] = balance;
    }

    if (was_successfully != null) {
      map['was_successfully'] =
          forQuery ? (was_successfully! ? 1 : 0) : was_successfully;
    }

    if (id_balance_per_week != null) {
      map['id_balance_per_week'] = forView
          ? plBalance_per_week == null
              ? id_balance_per_week
              : plBalance_per_week!.id
          : id_balance_per_week;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (balance != null) {
      map['balance'] = balance;
    }

    if (was_successfully != null) {
      map['was_successfully'] =
          forQuery ? (was_successfully! ? 1 : 0) : was_successfully;
    }

    if (id_balance_per_week != null) {
      map['id_balance_per_week'] = forView
          ? plBalance_per_week == null
              ? id_balance_per_week
              : plBalance_per_week!.id
          : id_balance_per_week;
    }

// COLLECTIONS (Balance_per_day)
    if (!forQuery) {
      map['Buying_lists'] = await getBuying_lists()!.toMapList();
    }
// END COLLECTIONS (Balance_per_day)

    return map;
  }

  /// This method returns Json String [Balance_per_day]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Balance_per_day]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [balance, was_successfully, id_balance_per_week];
  }

  List<dynamic> toArgsWithIds() {
    return [id, balance, was_successfully, id_balance_per_week];
  }

  static Future<List<Balance_per_day>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Balance_per_day.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Balance_per_day>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Balance_per_day>[];
    try {
      objList = list
          .map((balance_per_day) =>
              Balance_per_day.fromMap(balance_per_day as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR Balance_per_day.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Balance_per_day>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Balance_per_day> objList = <Balance_per_day>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Balance_per_day.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('balance_per_day.plBuying_lists') && */ (preloadFields ==
                null ||
            preloadFields.contains('plBuying_lists'))) {
          /*_loadedfields!.add('balance_per_day.plBuying_lists'); */
          obj.plBuying_lists = obj.plBuying_lists ??
              await obj.getBuying_lists()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('balance_per_week.plBalance_per_week') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plBalance_per_week'))) {
          /*_loadedfields!.add('balance_per_week.plBalance_per_week');*/
          obj.plBalance_per_week = obj.plBalance_per_week ??
              await obj.getBalance_per_week(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Balance_per_day by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int? id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Balance_per_day if exist, otherwise returns null
  Future<Balance_per_day?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Balance_per_day? obj;
    final data = await _mnBalance_per_day.getById([id]);
    if (data.length != 0) {
      obj = Balance_per_day.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('balance_per_day.plBuying_lists') && */ (preloadFields ==
                null ||
            preloadFields.contains('plBuying_lists'))) {
          /*_loadedfields!.add('balance_per_day.plBuying_lists'); */
          obj.plBuying_lists = obj.plBuying_lists ??
              await obj.getBuying_lists()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('balance_per_week.plBalance_per_week') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plBalance_per_week'))) {
          /*_loadedfields!.add('balance_per_week.plBalance_per_week');*/
          obj.plBalance_per_week = obj.plBalance_per_week ??
              await obj.getBalance_per_week(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Balance_per_day) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int?> save() async {
    if (id == null || id == 0) {
      id = await _mnBalance_per_day.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnBalance_per_day.update(this);
    }

    return id;
  }

  /// saveAs Balance_per_day. Returns a new Primary Key value of Balance_per_day

  /// <returns>Returns a new Primary Key value of Balance_per_day
  Future<int?> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<Balance_per_day> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(
      List<Balance_per_day> balance_per_daies) async {
    // final results = _mnBalance_per_day.saveAll('INSERT OR REPLACE INTO balance_per_day (id,balance, was_successfully, id_balance_per_week)  VALUES (?,?,?,?)',balance_per_daies);
    // return results; removed in sqfentity_gen 1.3.0+6
    await MyDbModel().batchStart();
    for (final obj in balance_per_daies) {
      await obj.save();
    }
    //    return MyDbModel().batchCommit();
    final result = await MyDbModel().batchCommit();
    for (int i = 0; i < balance_per_daies.length; i++) {
      if (balance_per_daies[i].id == null) {
        balance_per_daies[i].id = result![i] as int;
      }
    }

    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id

  Future<int?> upsert() async {
    try {
      final result = await _mnBalance_per_day.rawInsert(
          'INSERT OR REPLACE INTO balance_per_day (id,balance, was_successfully, id_balance_per_week)  VALUES (?,?,?,?)',
          [id, balance, was_successfully, id_balance_per_week]);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Balance_per_day id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'Balance_per_day id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Balance_per_day Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Balance_per_day>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(
      List<Balance_per_day> balance_per_daies) async {
    final results = await _mnBalance_per_day.rawInsertAll(
        'INSERT OR REPLACE INTO balance_per_day (id,balance, was_successfully, id_balance_per_week)  VALUES (?,?,?,?)',
        balance_per_daies);
    return results;
  }

  /// Deletes Balance_per_day

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted

  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Balance_per_day invoked (id=$id)');
    var result = BoolResult(success: false);
    {
      result = await Buying_list()
          .select()
          .id_balance_per_day
          .equals(id)
          .and
          .delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnBalance_per_day
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnBalance_per_day.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  Balance_per_dayFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return Balance_per_dayFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  Balance_per_dayFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return Balance_per_dayFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}
  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion balance_per_day

// region Balance_per_dayField
class Balance_per_dayField extends SearchCriteria {
  Balance_per_dayField(this.balance_per_dayFB);
  // { param = DbParameter(); }
  DbParameter param = DbParameter();
  String _waitingNot = '';
  Balance_per_dayFilterBuilder balance_per_dayFB;

  Balance_per_dayField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  Balance_per_dayFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    balance_per_dayFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, balance_per_dayFB.parameters, param,
            SqlSyntax.EQuals, balance_per_dayFB._addedBlocks)
        : setCriteria(pValue, balance_per_dayFB.parameters, param,
            SqlSyntax.NotEQuals, balance_per_dayFB._addedBlocks);
    _waitingNot = '';
    balance_per_dayFB
            ._addedBlocks.needEndBlock![balance_per_dayFB._blockIndex] =
        balance_per_dayFB._addedBlocks.retVal;
    return balance_per_dayFB;
  }

  Balance_per_dayFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    balance_per_dayFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, balance_per_dayFB.parameters, param,
            SqlSyntax.EQualsOrNull, balance_per_dayFB._addedBlocks)
        : setCriteria(pValue, balance_per_dayFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, balance_per_dayFB._addedBlocks);
    _waitingNot = '';
    balance_per_dayFB
            ._addedBlocks.needEndBlock![balance_per_dayFB._blockIndex] =
        balance_per_dayFB._addedBlocks.retVal;
    return balance_per_dayFB;
  }

  Balance_per_dayFilterBuilder isNull() {
    balance_per_dayFB._addedBlocks = setCriteria(
        0,
        balance_per_dayFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        balance_per_dayFB._addedBlocks);
    _waitingNot = '';
    balance_per_dayFB
            ._addedBlocks.needEndBlock![balance_per_dayFB._blockIndex] =
        balance_per_dayFB._addedBlocks.retVal;
    return balance_per_dayFB;
  }

  Balance_per_dayFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      balance_per_dayFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          balance_per_dayFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          balance_per_dayFB._addedBlocks);
      _waitingNot = '';
      balance_per_dayFB
              ._addedBlocks.needEndBlock![balance_per_dayFB._blockIndex] =
          balance_per_dayFB._addedBlocks.retVal;
    }
    return balance_per_dayFB;
  }

  Balance_per_dayFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      balance_per_dayFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          balance_per_dayFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          balance_per_dayFB._addedBlocks);
      _waitingNot = '';
      balance_per_dayFB
              ._addedBlocks.needEndBlock![balance_per_dayFB._blockIndex] =
          balance_per_dayFB._addedBlocks.retVal;
      balance_per_dayFB
              ._addedBlocks.needEndBlock![balance_per_dayFB._blockIndex] =
          balance_per_dayFB._addedBlocks.retVal;
    }
    return balance_per_dayFB;
  }

  Balance_per_dayFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      balance_per_dayFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          balance_per_dayFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          balance_per_dayFB._addedBlocks);
      _waitingNot = '';
      balance_per_dayFB
              ._addedBlocks.needEndBlock![balance_per_dayFB._blockIndex] =
          balance_per_dayFB._addedBlocks.retVal;
    }
    return balance_per_dayFB;
  }

  Balance_per_dayFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      balance_per_dayFB._addedBlocks = setCriteria(
          pFirst,
          balance_per_dayFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          balance_per_dayFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        balance_per_dayFB._addedBlocks = setCriteria(
            pFirst,
            balance_per_dayFB.parameters,
            param,
            SqlSyntax.LessThan,
            balance_per_dayFB._addedBlocks);
      } else {
        balance_per_dayFB._addedBlocks = setCriteria(
            pFirst,
            balance_per_dayFB.parameters,
            param,
            SqlSyntax.GreaterThanOrEquals,
            balance_per_dayFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        balance_per_dayFB._addedBlocks = setCriteria(
            pLast,
            balance_per_dayFB.parameters,
            param,
            SqlSyntax.GreaterThan,
            balance_per_dayFB._addedBlocks);
      } else {
        balance_per_dayFB._addedBlocks = setCriteria(
            pLast,
            balance_per_dayFB.parameters,
            param,
            SqlSyntax.LessThanOrEquals,
            balance_per_dayFB._addedBlocks);
      }
    }
    _waitingNot = '';
    balance_per_dayFB
            ._addedBlocks.needEndBlock![balance_per_dayFB._blockIndex] =
        balance_per_dayFB._addedBlocks.retVal;
    return balance_per_dayFB;
  }

  Balance_per_dayFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    balance_per_dayFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, balance_per_dayFB.parameters, param,
            SqlSyntax.GreaterThan, balance_per_dayFB._addedBlocks)
        : setCriteria(pValue, balance_per_dayFB.parameters, param,
            SqlSyntax.LessThanOrEquals, balance_per_dayFB._addedBlocks);
    _waitingNot = '';
    balance_per_dayFB
            ._addedBlocks.needEndBlock![balance_per_dayFB._blockIndex] =
        balance_per_dayFB._addedBlocks.retVal;
    return balance_per_dayFB;
  }

  Balance_per_dayFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    balance_per_dayFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, balance_per_dayFB.parameters, param,
            SqlSyntax.LessThan, balance_per_dayFB._addedBlocks)
        : setCriteria(pValue, balance_per_dayFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, balance_per_dayFB._addedBlocks);
    _waitingNot = '';
    balance_per_dayFB
            ._addedBlocks.needEndBlock![balance_per_dayFB._blockIndex] =
        balance_per_dayFB._addedBlocks.retVal;
    return balance_per_dayFB;
  }

  Balance_per_dayFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    balance_per_dayFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, balance_per_dayFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, balance_per_dayFB._addedBlocks)
        : setCriteria(pValue, balance_per_dayFB.parameters, param,
            SqlSyntax.LessThan, balance_per_dayFB._addedBlocks);
    _waitingNot = '';
    balance_per_dayFB
            ._addedBlocks.needEndBlock![balance_per_dayFB._blockIndex] =
        balance_per_dayFB._addedBlocks.retVal;
    return balance_per_dayFB;
  }

  Balance_per_dayFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    balance_per_dayFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, balance_per_dayFB.parameters, param,
            SqlSyntax.LessThanOrEquals, balance_per_dayFB._addedBlocks)
        : setCriteria(pValue, balance_per_dayFB.parameters, param,
            SqlSyntax.GreaterThan, balance_per_dayFB._addedBlocks);
    _waitingNot = '';
    balance_per_dayFB
            ._addedBlocks.needEndBlock![balance_per_dayFB._blockIndex] =
        balance_per_dayFB._addedBlocks.retVal;
    return balance_per_dayFB;
  }

  Balance_per_dayFilterBuilder inValues(dynamic pValue) {
    balance_per_dayFB._addedBlocks = setCriteria(
        pValue,
        balance_per_dayFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        balance_per_dayFB._addedBlocks);
    _waitingNot = '';
    balance_per_dayFB
            ._addedBlocks.needEndBlock![balance_per_dayFB._blockIndex] =
        balance_per_dayFB._addedBlocks.retVal;
    return balance_per_dayFB;
  }
}
// endregion Balance_per_dayField

// region Balance_per_dayFilterBuilder
class Balance_per_dayFilterBuilder extends SearchCriteria {
  Balance_per_dayFilterBuilder(Balance_per_day obj) {
    whereString = '';
    groupByList = <String>[];
    _addedBlocks.needEndBlock!.add(false);
    _addedBlocks.waitingStartBlock!.add(false);
    _obj = obj;
  }
  AddedBlocks _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
  int _blockIndex = 0;
  List<DbParameter> parameters = <DbParameter>[];
  List<String> orderByList = <String>[];
  Balance_per_day? _obj;
  QueryParams qparams = QueryParams();
  int _pagesize = 0;
  int _page = 0;

  /// put the sql keyword 'AND'
  Balance_per_dayFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  Balance_per_dayFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  Balance_per_dayFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock!.add(true);
    _addedBlocks.needEndBlock!.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock![_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  Balance_per_dayFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock![_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  Balance_per_dayFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  Balance_per_dayFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  Balance_per_dayFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock![_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock!.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock!.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  Balance_per_dayFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  Balance_per_dayFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  Balance_per_dayFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  Balance_per_dayFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  Balance_per_dayField setField(
      Balance_per_dayField? field, String colName, DbType dbtype) {
    return Balance_per_dayField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock![_blockIndex]);
  }

  Balance_per_dayField? _id;
  Balance_per_dayField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  Balance_per_dayField? _balance;
  Balance_per_dayField get balance {
    return _balance = setField(_balance, 'balance', DbType.real);
  }

  Balance_per_dayField? _was_successfully;
  Balance_per_dayField get was_successfully {
    return _was_successfully =
        setField(_was_successfully, 'was_successfully', DbType.bool);
  }

  Balance_per_dayField? _id_balance_per_week;
  Balance_per_dayField get id_balance_per_week {
    return _id_balance_per_week =
        setField(_id_balance_per_week, 'id_balance_per_week', DbType.integer);
  }

  bool _getIsDeleted = false;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text || param.value[0] is String
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName!)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName!);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Balance_per_day._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Balance_per_day> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult(success: false);
    // Delete sub records where in (Buying_list) according to DeleteRule.CASCADE
    final idListBuying_listBYid_balance_per_day = toListPrimaryKeySQL(false);
    final resBuying_listBYid_balance_per_day = await Buying_list()
        .select()
        .where(
            'id_balance_per_day IN (${idListBuying_listBYid_balance_per_day['sql']})',
            parameterValue: idListBuying_listBYid_balance_per_day['args'])
        .delete(hardDelete);
    if (!resBuying_listBYid_balance_per_day.success) {
      return resBuying_listBYid_balance_per_day;
    }

    if (Balance_per_day._softDeleteActivated && !hardDelete) {
      r = await _obj!._mnBalance_per_day.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj!._mnBalance_per_day.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from balance_per_day ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj!._mnBalance_per_day.updateBatch(qparams, values);
  }

  /// This method always returns Balance_per_day Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Balance_per_day>
  Future<Balance_per_day?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj!._mnBalance_per_day.toList(qparams);
    final data = await objFuture;
    Balance_per_day? obj;
    if (data.isNotEmpty) {
      obj = Balance_per_day.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('balance_per_day.plBuying_lists') && */ (preloadFields ==
                null ||
            preloadFields.contains('plBuying_lists'))) {
          /*_loadedfields!.add('balance_per_day.plBuying_lists'); */
          obj.plBuying_lists = obj.plBuying_lists ??
              await obj.getBuying_lists()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('balance_per_week.plBalance_per_week') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plBalance_per_week'))) {
          /*_loadedfields!.add('balance_per_week.plBalance_per_week');*/
          obj.plBalance_per_week = obj.plBalance_per_week ??
              await obj.getBalance_per_week(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Balance_per_day]
  ///
  /// <returns>int
  Future<int> toCount(
      [VoidCallback Function(int c)? balance_per_dayCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final balance_per_daiesFuture =
        await _obj!._mnBalance_per_day.toList(qparams);
    final int count = balance_per_daiesFuture[0]['CNT'] as int;
    if (balance_per_dayCount != null) {
      balance_per_dayCount(count);
    }
    return count;
  }

  /// This method returns List<Balance_per_day> [Balance_per_day]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Balance_per_day>
  Future<List<Balance_per_day>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Balance_per_day> balance_per_daiesData =
        await Balance_per_day.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return balance_per_daiesData;
  }

  /// This method returns Json String [Balance_per_day]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Balance_per_day]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Balance_per_day]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj!._mnBalance_per_day.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Balance_per_day]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM balance_per_day WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj!._mnBalance_per_day.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Balance_per_day]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj!._mnBalance_per_day.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Balance_per_day.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    _buildParameters();

    final objectFuture = _obj!._mnBalance_per_day.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion Balance_per_dayFilterBuilder

// region Balance_per_dayFields
class Balance_per_dayFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fBalance;
  static TableField get balance {
    return _fBalance =
        _fBalance ?? SqlSyntax.setField(_fBalance, 'balance', DbType.real);
  }

  static TableField? _fWas_successfully;
  static TableField get was_successfully {
    return _fWas_successfully = _fWas_successfully ??
        SqlSyntax.setField(_fWas_successfully, 'was_successfully', DbType.bool);
  }

  static TableField? _fId_balance_per_week;
  static TableField get id_balance_per_week {
    return _fId_balance_per_week = _fId_balance_per_week ??
        SqlSyntax.setField(
            _fId_balance_per_week, 'id_balance_per_week', DbType.integer);
  }
}
// endregion Balance_per_dayFields

//region Balance_per_dayManager
class Balance_per_dayManager extends SqfEntityProvider {
  Balance_per_dayManager()
      : super(MyDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'balance_per_day';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion Balance_per_dayManager
// region Buying_list
class Buying_list {
  Buying_list(
      {this.id,
      this.budget,
      this.is_active,
      this.id_balance_per_month,
      this.id_balance_per_week,
      this.id_balance_per_day,
      this.isDeleted}) {
    _setDefaultValues();
  }
  Buying_list.withFields(this.budget, this.is_active, this.id_balance_per_month,
      this.id_balance_per_week, this.id_balance_per_day, this.isDeleted) {
    _setDefaultValues();
  }
  Buying_list.withId(
      this.id,
      this.budget,
      this.is_active,
      this.id_balance_per_month,
      this.id_balance_per_week,
      this.id_balance_per_day,
      this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Buying_list.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['budget'] != null) {
      budget = double.tryParse(o['budget'].toString());
    }
    if (o['is_active'] != null) {
      is_active = o['is_active'].toString() == '1' ||
          o['is_active'].toString() == 'true';
    }
    id_balance_per_month = int.tryParse(o['id_balance_per_month'].toString());

    id_balance_per_week = int.tryParse(o['id_balance_per_week'].toString());

    id_balance_per_day = int.tryParse(o['id_balance_per_day'].toString());

    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;

    // RELATIONSHIPS FromMAP
    plBalance_per_month = o['balance_per_month'] != null
        ? Balance_per_month.fromMap(
            o['balance_per_month'] as Map<String, dynamic>)
        : null;
    plBalance_per_week = o['balance_per_week'] != null
        ? Balance_per_week.fromMap(
            o['balance_per_week'] as Map<String, dynamic>)
        : null;
    plBalance_per_day = o['balance_per_day'] != null
        ? Balance_per_day.fromMap(o['balance_per_day'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (Buying_list)
  int? id;
  double? budget;
  bool? is_active;
  int? id_balance_per_month;
  int? id_balance_per_week;
  int? id_balance_per_day;
  bool? isDeleted;

  BoolResult? saveResult;
  // end FIELDS (Buying_list)

// RELATIONSHIPS (Buying_list)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plBalance_per_month', 'plField2'..]) or so on..
  Balance_per_month? plBalance_per_month;

  /// get Balance_per_month By Id_balance_per_month
  Future<Balance_per_month?> getBalance_per_month(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Balance_per_month().getById(id_balance_per_month,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }

  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plBalance_per_week', 'plField2'..]) or so on..
  Balance_per_week? plBalance_per_week;

  /// get Balance_per_week By Id_balance_per_week
  Future<Balance_per_week?> getBalance_per_week(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Balance_per_week().getById(id_balance_per_week,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }

  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plBalance_per_day', 'plField2'..]) or so on..
  Balance_per_day? plBalance_per_day;

  /// get Balance_per_day By Id_balance_per_day
  Future<Balance_per_day?> getBalance_per_day(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Balance_per_day().getById(id_balance_per_day,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (Buying_list)

// COLLECTIONS & VIRTUALS (Buying_list)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plBuying_list_has_products', 'plField2'..]) or so on..
  List<Buying_list_has_product>? plBuying_list_has_products;

  /// get Buying_list_has_product(s) filtered by id=id_buying_list
  Buying_list_has_productFilterBuilder? getBuying_list_has_products(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Buying_list_has_product()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .id_buying_list
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Buying_list)

  static const bool _softDeleteActivated = true;
  Buying_listManager? __mnBuying_list;

  Buying_listManager get _mnBuying_list {
    return __mnBuying_list = __mnBuying_list ?? Buying_listManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (budget != null) {
      map['budget'] = budget;
    }

    if (is_active != null) {
      map['is_active'] = forQuery ? (is_active! ? 1 : 0) : is_active;
    }

    if (id_balance_per_month != null) {
      map['id_balance_per_month'] = forView
          ? plBalance_per_month == null
              ? id_balance_per_month
              : plBalance_per_month!.id
          : id_balance_per_month;
    }

    if (id_balance_per_week != null) {
      map['id_balance_per_week'] = forView
          ? plBalance_per_week == null
              ? id_balance_per_week
              : plBalance_per_week!.id
          : id_balance_per_week;
    }

    if (id_balance_per_day != null) {
      map['id_balance_per_day'] = forView
          ? plBalance_per_day == null
              ? id_balance_per_day
              : plBalance_per_day!.id
          : id_balance_per_day;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (budget != null) {
      map['budget'] = budget;
    }

    if (is_active != null) {
      map['is_active'] = forQuery ? (is_active! ? 1 : 0) : is_active;
    }

    if (id_balance_per_month != null) {
      map['id_balance_per_month'] = forView
          ? plBalance_per_month == null
              ? id_balance_per_month
              : plBalance_per_month!.id
          : id_balance_per_month;
    }

    if (id_balance_per_week != null) {
      map['id_balance_per_week'] = forView
          ? plBalance_per_week == null
              ? id_balance_per_week
              : plBalance_per_week!.id
          : id_balance_per_week;
    }

    if (id_balance_per_day != null) {
      map['id_balance_per_day'] = forView
          ? plBalance_per_day == null
              ? id_balance_per_day
              : plBalance_per_day!.id
          : id_balance_per_day;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

// COLLECTIONS (Buying_list)
    if (!forQuery) {
      map['Buying_list_has_products'] =
          await getBuying_list_has_products()!.toMapList();
    }
// END COLLECTIONS (Buying_list)

    return map;
  }

  /// This method returns Json String [Buying_list]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Buying_list]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [
      budget,
      is_active,
      id_balance_per_month,
      id_balance_per_week,
      id_balance_per_day,
      isDeleted
    ];
  }

  List<dynamic> toArgsWithIds() {
    return [
      id,
      budget,
      is_active,
      id_balance_per_month,
      id_balance_per_week,
      id_balance_per_day,
      isDeleted
    ];
  }

  static Future<List<Buying_list>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Buying_list.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Buying_list>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Buying_list>[];
    try {
      objList = list
          .map((buying_list) =>
              Buying_list.fromMap(buying_list as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR Buying_list.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Buying_list>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Buying_list> objList = <Buying_list>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Buying_list.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('buying_list.plBuying_list_has_products') && */ (preloadFields ==
                null ||
            preloadFields.contains('plBuying_list_has_products'))) {
          /*_loadedfields!.add('buying_list.plBuying_list_has_products'); */
          obj.plBuying_list_has_products = obj.plBuying_list_has_products ??
              await obj.getBuying_list_has_products()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('balance_per_month.plBalance_per_month') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plBalance_per_month'))) {
          /*_loadedfields!.add('balance_per_month.plBalance_per_month');*/
          obj.plBalance_per_month = obj.plBalance_per_month ??
              await obj.getBalance_per_month(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
        if (/*!_loadedfields!.contains('balance_per_week.plBalance_per_week') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plBalance_per_week'))) {
          /*_loadedfields!.add('balance_per_week.plBalance_per_week');*/
          obj.plBalance_per_week = obj.plBalance_per_week ??
              await obj.getBalance_per_week(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
        if (/*!_loadedfields!.contains('balance_per_day.plBalance_per_day') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plBalance_per_day'))) {
          /*_loadedfields!.add('balance_per_day.plBalance_per_day');*/
          obj.plBalance_per_day = obj.plBalance_per_day ??
              await obj.getBalance_per_day(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Buying_list by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int? id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Buying_list if exist, otherwise returns null
  Future<Buying_list?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Buying_list? obj;
    final data = await _mnBuying_list.getById([id]);
    if (data.length != 0) {
      obj = Buying_list.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('buying_list.plBuying_list_has_products') && */ (preloadFields ==
                null ||
            preloadFields.contains('plBuying_list_has_products'))) {
          /*_loadedfields!.add('buying_list.plBuying_list_has_products'); */
          obj.plBuying_list_has_products = obj.plBuying_list_has_products ??
              await obj.getBuying_list_has_products()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('balance_per_month.plBalance_per_month') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plBalance_per_month'))) {
          /*_loadedfields!.add('balance_per_month.plBalance_per_month');*/
          obj.plBalance_per_month = obj.plBalance_per_month ??
              await obj.getBalance_per_month(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
        if (/*!_loadedfields!.contains('balance_per_week.plBalance_per_week') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plBalance_per_week'))) {
          /*_loadedfields!.add('balance_per_week.plBalance_per_week');*/
          obj.plBalance_per_week = obj.plBalance_per_week ??
              await obj.getBalance_per_week(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
        if (/*!_loadedfields!.contains('balance_per_day.plBalance_per_day') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plBalance_per_day'))) {
          /*_loadedfields!.add('balance_per_day.plBalance_per_day');*/
          obj.plBalance_per_day = obj.plBalance_per_day ??
              await obj.getBalance_per_day(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Buying_list) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int?> save() async {
    if (id == null || id == 0) {
      id = await _mnBuying_list.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnBuying_list.update(this);
    }

    return id;
  }

  /// saveAs Buying_list. Returns a new Primary Key value of Buying_list

  /// <returns>Returns a new Primary Key value of Buying_list
  Future<int?> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<Buying_list> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Buying_list> buying_lists) async {
    // final results = _mnBuying_list.saveAll('INSERT OR REPLACE INTO buying_list (id,budget, is_active, id_balance_per_month, id_balance_per_week, id_balance_per_day,isDeleted)  VALUES (?,?,?,?,?,?,?)',buying_lists);
    // return results; removed in sqfentity_gen 1.3.0+6
    await MyDbModel().batchStart();
    for (final obj in buying_lists) {
      await obj.save();
    }
    //    return MyDbModel().batchCommit();
    final result = await MyDbModel().batchCommit();
    for (int i = 0; i < buying_lists.length; i++) {
      if (buying_lists[i].id == null) {
        buying_lists[i].id = result![i] as int;
      }
    }

    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id

  Future<int?> upsert() async {
    try {
      final result = await _mnBuying_list.rawInsert(
          'INSERT OR REPLACE INTO buying_list (id,budget, is_active, id_balance_per_month, id_balance_per_week, id_balance_per_day,isDeleted)  VALUES (?,?,?,?,?,?,?)',
          [
            id,
            budget,
            is_active,
            id_balance_per_month,
            id_balance_per_week,
            id_balance_per_day,
            isDeleted
          ]);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Buying_list id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Buying_list id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Buying_list Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Buying_list>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Buying_list> buying_lists) async {
    final results = await _mnBuying_list.rawInsertAll(
        'INSERT OR REPLACE INTO buying_list (id,budget, is_active, id_balance_per_month, id_balance_per_week, id_balance_per_day,isDeleted)  VALUES (?,?,?,?,?,?,?)',
        buying_lists);
    return results;
  }

  /// Deletes Buying_list

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted

  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Buying_list invoked (id=$id)');
    var result = BoolResult(success: false);
    {
      result = await Buying_list_has_product()
          .select()
          .id_buying_list
          .equals(id)
          .and
          .delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnBuying_list
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnBuying_list.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Buying_list>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover Buying_list invoked (id=$id)');
    {
      return _mnBuying_list.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  Buying_listFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return Buying_listFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  Buying_listFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return Buying_listFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    is_active = is_active ?? true;
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion buying_list

// region Buying_listField
class Buying_listField extends SearchCriteria {
  Buying_listField(this.buying_listFB);
  // { param = DbParameter(); }
  DbParameter param = DbParameter();
  String _waitingNot = '';
  Buying_listFilterBuilder buying_listFB;

  Buying_listField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  Buying_listFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    buying_listFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, buying_listFB.parameters, param, SqlSyntax.EQuals,
            buying_listFB._addedBlocks)
        : setCriteria(pValue, buying_listFB.parameters, param,
            SqlSyntax.NotEQuals, buying_listFB._addedBlocks);
    _waitingNot = '';
    buying_listFB._addedBlocks.needEndBlock![buying_listFB._blockIndex] =
        buying_listFB._addedBlocks.retVal;
    return buying_listFB;
  }

  Buying_listFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    buying_listFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, buying_listFB.parameters, param,
            SqlSyntax.EQualsOrNull, buying_listFB._addedBlocks)
        : setCriteria(pValue, buying_listFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, buying_listFB._addedBlocks);
    _waitingNot = '';
    buying_listFB._addedBlocks.needEndBlock![buying_listFB._blockIndex] =
        buying_listFB._addedBlocks.retVal;
    return buying_listFB;
  }

  Buying_listFilterBuilder isNull() {
    buying_listFB._addedBlocks = setCriteria(
        0,
        buying_listFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        buying_listFB._addedBlocks);
    _waitingNot = '';
    buying_listFB._addedBlocks.needEndBlock![buying_listFB._blockIndex] =
        buying_listFB._addedBlocks.retVal;
    return buying_listFB;
  }

  Buying_listFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      buying_listFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          buying_listFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          buying_listFB._addedBlocks);
      _waitingNot = '';
      buying_listFB._addedBlocks.needEndBlock![buying_listFB._blockIndex] =
          buying_listFB._addedBlocks.retVal;
    }
    return buying_listFB;
  }

  Buying_listFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      buying_listFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          buying_listFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          buying_listFB._addedBlocks);
      _waitingNot = '';
      buying_listFB._addedBlocks.needEndBlock![buying_listFB._blockIndex] =
          buying_listFB._addedBlocks.retVal;
      buying_listFB._addedBlocks.needEndBlock![buying_listFB._blockIndex] =
          buying_listFB._addedBlocks.retVal;
    }
    return buying_listFB;
  }

  Buying_listFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      buying_listFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          buying_listFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          buying_listFB._addedBlocks);
      _waitingNot = '';
      buying_listFB._addedBlocks.needEndBlock![buying_listFB._blockIndex] =
          buying_listFB._addedBlocks.retVal;
    }
    return buying_listFB;
  }

  Buying_listFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      buying_listFB._addedBlocks = setCriteria(
          pFirst,
          buying_listFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          buying_listFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        buying_listFB._addedBlocks = setCriteria(
            pFirst,
            buying_listFB.parameters,
            param,
            SqlSyntax.LessThan,
            buying_listFB._addedBlocks);
      } else {
        buying_listFB._addedBlocks = setCriteria(
            pFirst,
            buying_listFB.parameters,
            param,
            SqlSyntax.GreaterThanOrEquals,
            buying_listFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        buying_listFB._addedBlocks = setCriteria(
            pLast,
            buying_listFB.parameters,
            param,
            SqlSyntax.GreaterThan,
            buying_listFB._addedBlocks);
      } else {
        buying_listFB._addedBlocks = setCriteria(
            pLast,
            buying_listFB.parameters,
            param,
            SqlSyntax.LessThanOrEquals,
            buying_listFB._addedBlocks);
      }
    }
    _waitingNot = '';
    buying_listFB._addedBlocks.needEndBlock![buying_listFB._blockIndex] =
        buying_listFB._addedBlocks.retVal;
    return buying_listFB;
  }

  Buying_listFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    buying_listFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, buying_listFB.parameters, param,
            SqlSyntax.GreaterThan, buying_listFB._addedBlocks)
        : setCriteria(pValue, buying_listFB.parameters, param,
            SqlSyntax.LessThanOrEquals, buying_listFB._addedBlocks);
    _waitingNot = '';
    buying_listFB._addedBlocks.needEndBlock![buying_listFB._blockIndex] =
        buying_listFB._addedBlocks.retVal;
    return buying_listFB;
  }

  Buying_listFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    buying_listFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, buying_listFB.parameters, param,
            SqlSyntax.LessThan, buying_listFB._addedBlocks)
        : setCriteria(pValue, buying_listFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, buying_listFB._addedBlocks);
    _waitingNot = '';
    buying_listFB._addedBlocks.needEndBlock![buying_listFB._blockIndex] =
        buying_listFB._addedBlocks.retVal;
    return buying_listFB;
  }

  Buying_listFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    buying_listFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, buying_listFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, buying_listFB._addedBlocks)
        : setCriteria(pValue, buying_listFB.parameters, param,
            SqlSyntax.LessThan, buying_listFB._addedBlocks);
    _waitingNot = '';
    buying_listFB._addedBlocks.needEndBlock![buying_listFB._blockIndex] =
        buying_listFB._addedBlocks.retVal;
    return buying_listFB;
  }

  Buying_listFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    buying_listFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, buying_listFB.parameters, param,
            SqlSyntax.LessThanOrEquals, buying_listFB._addedBlocks)
        : setCriteria(pValue, buying_listFB.parameters, param,
            SqlSyntax.GreaterThan, buying_listFB._addedBlocks);
    _waitingNot = '';
    buying_listFB._addedBlocks.needEndBlock![buying_listFB._blockIndex] =
        buying_listFB._addedBlocks.retVal;
    return buying_listFB;
  }

  Buying_listFilterBuilder inValues(dynamic pValue) {
    buying_listFB._addedBlocks = setCriteria(
        pValue,
        buying_listFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        buying_listFB._addedBlocks);
    _waitingNot = '';
    buying_listFB._addedBlocks.needEndBlock![buying_listFB._blockIndex] =
        buying_listFB._addedBlocks.retVal;
    return buying_listFB;
  }
}
// endregion Buying_listField

// region Buying_listFilterBuilder
class Buying_listFilterBuilder extends SearchCriteria {
  Buying_listFilterBuilder(Buying_list obj) {
    whereString = '';
    groupByList = <String>[];
    _addedBlocks.needEndBlock!.add(false);
    _addedBlocks.waitingStartBlock!.add(false);
    _obj = obj;
  }
  AddedBlocks _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
  int _blockIndex = 0;
  List<DbParameter> parameters = <DbParameter>[];
  List<String> orderByList = <String>[];
  Buying_list? _obj;
  QueryParams qparams = QueryParams();
  int _pagesize = 0;
  int _page = 0;

  /// put the sql keyword 'AND'
  Buying_listFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  Buying_listFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  Buying_listFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock!.add(true);
    _addedBlocks.needEndBlock!.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock![_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  Buying_listFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock![_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  Buying_listFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  Buying_listFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  Buying_listFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock![_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock!.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock!.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  Buying_listFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  Buying_listFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  Buying_listFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  Buying_listFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  Buying_listField setField(
      Buying_listField? field, String colName, DbType dbtype) {
    return Buying_listField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock![_blockIndex]);
  }

  Buying_listField? _id;
  Buying_listField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  Buying_listField? _budget;
  Buying_listField get budget {
    return _budget = setField(_budget, 'budget', DbType.real);
  }

  Buying_listField? _is_active;
  Buying_listField get is_active {
    return _is_active = setField(_is_active, 'is_active', DbType.bool);
  }

  Buying_listField? _id_balance_per_month;
  Buying_listField get id_balance_per_month {
    return _id_balance_per_month =
        setField(_id_balance_per_month, 'id_balance_per_month', DbType.integer);
  }

  Buying_listField? _id_balance_per_week;
  Buying_listField get id_balance_per_week {
    return _id_balance_per_week =
        setField(_id_balance_per_week, 'id_balance_per_week', DbType.integer);
  }

  Buying_listField? _id_balance_per_day;
  Buying_listField get id_balance_per_day {
    return _id_balance_per_day =
        setField(_id_balance_per_day, 'id_balance_per_day', DbType.integer);
  }

  Buying_listField? _isDeleted;
  Buying_listField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted = false;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text || param.value[0] is String
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName!)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName!);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Buying_list._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Buying_list> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult(success: false);
    // Delete sub records where in (Buying_list_has_product) according to DeleteRule.CASCADE
    final idListBuying_list_has_productBYid_buying_list =
        toListPrimaryKeySQL(false);
    final resBuying_list_has_productBYid_buying_list =
        await Buying_list_has_product()
            .select()
            .where(
                'id_buying_list IN (${idListBuying_list_has_productBYid_buying_list['sql']})',
                parameterValue:
                    idListBuying_list_has_productBYid_buying_list['args'])
            .delete(hardDelete);
    if (!resBuying_list_has_productBYid_buying_list.success) {
      return resBuying_list_has_productBYid_buying_list;
    }

    if (Buying_list._softDeleteActivated && !hardDelete) {
      r = await _obj!._mnBuying_list.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj!._mnBuying_list.delete(qparams);
    }
    return r;
  }

  /// Recover List<Buying_list> bulk by query
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover Buying_list bulk invoked');
    return _obj!._mnBuying_list.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from buying_list ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj!._mnBuying_list.updateBatch(qparams, values);
  }

  /// This method always returns Buying_list Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Buying_list>
  Future<Buying_list?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj!._mnBuying_list.toList(qparams);
    final data = await objFuture;
    Buying_list? obj;
    if (data.isNotEmpty) {
      obj = Buying_list.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('buying_list.plBuying_list_has_products') && */ (preloadFields ==
                null ||
            preloadFields.contains('plBuying_list_has_products'))) {
          /*_loadedfields!.add('buying_list.plBuying_list_has_products'); */
          obj.plBuying_list_has_products = obj.plBuying_list_has_products ??
              await obj.getBuying_list_has_products()!.toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('balance_per_month.plBalance_per_month') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plBalance_per_month'))) {
          /*_loadedfields!.add('balance_per_month.plBalance_per_month');*/
          obj.plBalance_per_month = obj.plBalance_per_month ??
              await obj.getBalance_per_month(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
        if (/*!_loadedfields!.contains('balance_per_week.plBalance_per_week') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plBalance_per_week'))) {
          /*_loadedfields!.add('balance_per_week.plBalance_per_week');*/
          obj.plBalance_per_week = obj.plBalance_per_week ??
              await obj.getBalance_per_week(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
        if (/*!_loadedfields!.contains('balance_per_day.plBalance_per_day') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plBalance_per_day'))) {
          /*_loadedfields!.add('balance_per_day.plBalance_per_day');*/
          obj.plBalance_per_day = obj.plBalance_per_day ??
              await obj.getBalance_per_day(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Buying_list]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c)? buying_listCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final buying_listsFuture = await _obj!._mnBuying_list.toList(qparams);
    final int count = buying_listsFuture[0]['CNT'] as int;
    if (buying_listCount != null) {
      buying_listCount(count);
    }
    return count;
  }

  /// This method returns List<Buying_list> [Buying_list]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Buying_list>
  Future<List<Buying_list>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Buying_list> buying_listsData = await Buying_list.fromMapList(
        data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return buying_listsData;
  }

  /// This method returns Json String [Buying_list]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Buying_list]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Buying_list]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj!._mnBuying_list.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Buying_list]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM buying_list WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj!._mnBuying_list.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Buying_list]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj!._mnBuying_list.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Buying_list.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    _buildParameters();

    final objectFuture = _obj!._mnBuying_list.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion Buying_listFilterBuilder

// region Buying_listFields
class Buying_listFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fBudget;
  static TableField get budget {
    return _fBudget =
        _fBudget ?? SqlSyntax.setField(_fBudget, 'budget', DbType.real);
  }

  static TableField? _fIs_active;
  static TableField get is_active {
    return _fIs_active = _fIs_active ??
        SqlSyntax.setField(_fIs_active, 'is_active', DbType.bool);
  }

  static TableField? _fId_balance_per_month;
  static TableField get id_balance_per_month {
    return _fId_balance_per_month = _fId_balance_per_month ??
        SqlSyntax.setField(
            _fId_balance_per_month, 'id_balance_per_month', DbType.integer);
  }

  static TableField? _fId_balance_per_week;
  static TableField get id_balance_per_week {
    return _fId_balance_per_week = _fId_balance_per_week ??
        SqlSyntax.setField(
            _fId_balance_per_week, 'id_balance_per_week', DbType.integer);
  }

  static TableField? _fId_balance_per_day;
  static TableField get id_balance_per_day {
    return _fId_balance_per_day = _fId_balance_per_day ??
        SqlSyntax.setField(
            _fId_balance_per_day, 'id_balance_per_day', DbType.integer);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion Buying_listFields

//region Buying_listManager
class Buying_listManager extends SqfEntityProvider {
  Buying_listManager()
      : super(MyDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'buying_list';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion Buying_listManager
// region Buying_list_has_product
class Buying_list_has_product {
  Buying_list_has_product(
      {this.id,
      this.why_need_it,
      this.already_buyed,
      this.id_product,
      this.id_buying_list}) {
    _setDefaultValues();
  }
  Buying_list_has_product.withFields(this.why_need_it, this.already_buyed,
      this.id_product, this.id_buying_list) {
    _setDefaultValues();
  }
  Buying_list_has_product.withId(this.id, this.why_need_it, this.already_buyed,
      this.id_product, this.id_buying_list) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Buying_list_has_product.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['why_need_it'] != null) {
      why_need_it = o['why_need_it'].toString();
    }
    if (o['already_buyed'] != null) {
      already_buyed = o['already_buyed'].toString() == '1' ||
          o['already_buyed'].toString() == 'true';
    }
    id_product = int.tryParse(o['id_product'].toString());

    id_buying_list = int.tryParse(o['id_buying_list'].toString());

    // RELATIONSHIPS FromMAP
    plProduct = o['product'] != null
        ? Product.fromMap(o['product'] as Map<String, dynamic>)
        : null;
    plBuying_list = o['buying_list'] != null
        ? Buying_list.fromMap(o['buying_list'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (Buying_list_has_product)
  int? id;
  String? why_need_it;
  bool? already_buyed;
  int? id_product;
  int? id_buying_list;

  BoolResult? saveResult;
  // end FIELDS (Buying_list_has_product)

// RELATIONSHIPS (Buying_list_has_product)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plProduct', 'plField2'..]) or so on..
  Product? plProduct;

  /// get Product By Id_product
  Future<Product?> getProduct(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Product().getById(id_product,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }

  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plBuying_list', 'plField2'..]) or so on..
  Buying_list? plBuying_list;

  /// get Buying_list By Id_buying_list
  Future<Buying_list?> getBuying_list(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Buying_list().getById(id_buying_list,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (Buying_list_has_product)

  static const bool _softDeleteActivated = false;
  Buying_list_has_productManager? __mnBuying_list_has_product;

  Buying_list_has_productManager get _mnBuying_list_has_product {
    return __mnBuying_list_has_product =
        __mnBuying_list_has_product ?? Buying_list_has_productManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (why_need_it != null) {
      map['why_need_it'] = why_need_it;
    }

    if (already_buyed != null) {
      map['already_buyed'] =
          forQuery ? (already_buyed! ? 1 : 0) : already_buyed;
    }

    if (id_product != null) {
      map['id_product'] = forView
          ? plProduct == null
              ? id_product
              : plProduct!.product
          : id_product;
    }

    if (id_buying_list != null) {
      map['id_buying_list'] = forView
          ? plBuying_list == null
              ? id_buying_list
              : plBuying_list!.id
          : id_buying_list;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (why_need_it != null) {
      map['why_need_it'] = why_need_it;
    }

    if (already_buyed != null) {
      map['already_buyed'] =
          forQuery ? (already_buyed! ? 1 : 0) : already_buyed;
    }

    if (id_product != null) {
      map['id_product'] = forView
          ? plProduct == null
              ? id_product
              : plProduct!.product
          : id_product;
    }

    if (id_buying_list != null) {
      map['id_buying_list'] = forView
          ? plBuying_list == null
              ? id_buying_list
              : plBuying_list!.id
          : id_buying_list;
    }

    return map;
  }

  /// This method returns Json String [Buying_list_has_product]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Buying_list_has_product]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [why_need_it, already_buyed, id_product, id_buying_list];
  }

  List<dynamic> toArgsWithIds() {
    return [id, why_need_it, already_buyed, id_product, id_buying_list];
  }

  static Future<List<Buying_list_has_product>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Buying_list_has_product.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Buying_list_has_product>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Buying_list_has_product>[];
    try {
      objList = list
          .map((buying_list_has_product) => Buying_list_has_product.fromMap(
              buying_list_has_product as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR Buying_list_has_product.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Buying_list_has_product>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Buying_list_has_product> objList = <Buying_list_has_product>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Buying_list_has_product.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('product.plProduct') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plProduct'))) {
          /*_loadedfields!.add('product.plProduct');*/
          obj.plProduct = obj.plProduct ??
              await obj.getProduct(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
        if (/*!_loadedfields!.contains('buying_list.plBuying_list') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plBuying_list'))) {
          /*_loadedfields!.add('buying_list.plBuying_list');*/
          obj.plBuying_list = obj.plBuying_list ??
              await obj.getBuying_list(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Buying_list_has_product by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int? id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Buying_list_has_product if exist, otherwise returns null
  Future<Buying_list_has_product?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Buying_list_has_product? obj;
    final data = await _mnBuying_list_has_product.getById([id]);
    if (data.length != 0) {
      obj = Buying_list_has_product.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('product.plProduct') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plProduct'))) {
          /*_loadedfields!.add('product.plProduct');*/
          obj.plProduct = obj.plProduct ??
              await obj.getProduct(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
        if (/*!_loadedfields!.contains('buying_list.plBuying_list') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plBuying_list'))) {
          /*_loadedfields!.add('buying_list.plBuying_list');*/
          obj.plBuying_list = obj.plBuying_list ??
              await obj.getBuying_list(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Buying_list_has_product) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int?> save() async {
    if (id == null || id == 0) {
      id = await _mnBuying_list_has_product.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnBuying_list_has_product.update(this);
    }

    return id;
  }

  /// saveAs Buying_list_has_product. Returns a new Primary Key value of Buying_list_has_product

  /// <returns>Returns a new Primary Key value of Buying_list_has_product
  Future<int?> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<Buying_list_has_product> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(
      List<Buying_list_has_product> buying_list_has_products) async {
    // final results = _mnBuying_list_has_product.saveAll('INSERT OR REPLACE INTO buying_list_has_products (id,why_need_it, already_buyed, id_product, id_buying_list)  VALUES (?,?,?,?,?)',buying_list_has_products);
    // return results; removed in sqfentity_gen 1.3.0+6
    await MyDbModel().batchStart();
    for (final obj in buying_list_has_products) {
      await obj.save();
    }
    //    return MyDbModel().batchCommit();
    final result = await MyDbModel().batchCommit();
    for (int i = 0; i < buying_list_has_products.length; i++) {
      if (buying_list_has_products[i].id == null) {
        buying_list_has_products[i].id = result![i] as int;
      }
    }

    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id

  Future<int?> upsert() async {
    try {
      final result = await _mnBuying_list_has_product.rawInsert(
          'INSERT OR REPLACE INTO buying_list_has_products (id,why_need_it, already_buyed, id_product, id_buying_list)  VALUES (?,?,?,?,?)',
          [id, why_need_it, already_buyed, id_product, id_buying_list]);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage:
                'Buying_list_has_product id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'Buying_list_has_product id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage:
              'Buying_list_has_product Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Buying_list_has_product>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(
      List<Buying_list_has_product> buying_list_has_products) async {
    final results = await _mnBuying_list_has_product.rawInsertAll(
        'INSERT OR REPLACE INTO buying_list_has_products (id,why_need_it, already_buyed, id_product, id_buying_list)  VALUES (?,?,?,?,?)',
        buying_list_has_products);
    return results;
  }

  /// Deletes Buying_list_has_product

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted

  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Buying_list_has_product invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnBuying_list_has_product
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnBuying_list_has_product.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  Buying_list_has_productFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return Buying_list_has_productFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  Buying_list_has_productFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return Buying_list_has_productFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    why_need_it = why_need_it ?? '';
    already_buyed = already_buyed ?? true;
  }
  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion buying_list_has_product

// region Buying_list_has_productField
class Buying_list_has_productField extends SearchCriteria {
  Buying_list_has_productField(this.buying_list_has_productFB);
  // { param = DbParameter(); }
  DbParameter param = DbParameter();
  String _waitingNot = '';
  Buying_list_has_productFilterBuilder buying_list_has_productFB;

  Buying_list_has_productField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  Buying_list_has_productFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    buying_list_has_productFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, buying_list_has_productFB.parameters, param,
            SqlSyntax.EQuals, buying_list_has_productFB._addedBlocks)
        : setCriteria(pValue, buying_list_has_productFB.parameters, param,
            SqlSyntax.NotEQuals, buying_list_has_productFB._addedBlocks);
    _waitingNot = '';
    buying_list_has_productFB
            ._addedBlocks.needEndBlock![buying_list_has_productFB._blockIndex] =
        buying_list_has_productFB._addedBlocks.retVal;
    return buying_list_has_productFB;
  }

  Buying_list_has_productFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    buying_list_has_productFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, buying_list_has_productFB.parameters, param,
            SqlSyntax.EQualsOrNull, buying_list_has_productFB._addedBlocks)
        : setCriteria(pValue, buying_list_has_productFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, buying_list_has_productFB._addedBlocks);
    _waitingNot = '';
    buying_list_has_productFB
            ._addedBlocks.needEndBlock![buying_list_has_productFB._blockIndex] =
        buying_list_has_productFB._addedBlocks.retVal;
    return buying_list_has_productFB;
  }

  Buying_list_has_productFilterBuilder isNull() {
    buying_list_has_productFB._addedBlocks = setCriteria(
        0,
        buying_list_has_productFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        buying_list_has_productFB._addedBlocks);
    _waitingNot = '';
    buying_list_has_productFB
            ._addedBlocks.needEndBlock![buying_list_has_productFB._blockIndex] =
        buying_list_has_productFB._addedBlocks.retVal;
    return buying_list_has_productFB;
  }

  Buying_list_has_productFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      buying_list_has_productFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          buying_list_has_productFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          buying_list_has_productFB._addedBlocks);
      _waitingNot = '';
      buying_list_has_productFB._addedBlocks
              .needEndBlock![buying_list_has_productFB._blockIndex] =
          buying_list_has_productFB._addedBlocks.retVal;
    }
    return buying_list_has_productFB;
  }

  Buying_list_has_productFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      buying_list_has_productFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          buying_list_has_productFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          buying_list_has_productFB._addedBlocks);
      _waitingNot = '';
      buying_list_has_productFB._addedBlocks
              .needEndBlock![buying_list_has_productFB._blockIndex] =
          buying_list_has_productFB._addedBlocks.retVal;
      buying_list_has_productFB._addedBlocks
              .needEndBlock![buying_list_has_productFB._blockIndex] =
          buying_list_has_productFB._addedBlocks.retVal;
    }
    return buying_list_has_productFB;
  }

  Buying_list_has_productFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      buying_list_has_productFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          buying_list_has_productFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          buying_list_has_productFB._addedBlocks);
      _waitingNot = '';
      buying_list_has_productFB._addedBlocks
              .needEndBlock![buying_list_has_productFB._blockIndex] =
          buying_list_has_productFB._addedBlocks.retVal;
    }
    return buying_list_has_productFB;
  }

  Buying_list_has_productFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      buying_list_has_productFB._addedBlocks = setCriteria(
          pFirst,
          buying_list_has_productFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          buying_list_has_productFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        buying_list_has_productFB._addedBlocks = setCriteria(
            pFirst,
            buying_list_has_productFB.parameters,
            param,
            SqlSyntax.LessThan,
            buying_list_has_productFB._addedBlocks);
      } else {
        buying_list_has_productFB._addedBlocks = setCriteria(
            pFirst,
            buying_list_has_productFB.parameters,
            param,
            SqlSyntax.GreaterThanOrEquals,
            buying_list_has_productFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        buying_list_has_productFB._addedBlocks = setCriteria(
            pLast,
            buying_list_has_productFB.parameters,
            param,
            SqlSyntax.GreaterThan,
            buying_list_has_productFB._addedBlocks);
      } else {
        buying_list_has_productFB._addedBlocks = setCriteria(
            pLast,
            buying_list_has_productFB.parameters,
            param,
            SqlSyntax.LessThanOrEquals,
            buying_list_has_productFB._addedBlocks);
      }
    }
    _waitingNot = '';
    buying_list_has_productFB
            ._addedBlocks.needEndBlock![buying_list_has_productFB._blockIndex] =
        buying_list_has_productFB._addedBlocks.retVal;
    return buying_list_has_productFB;
  }

  Buying_list_has_productFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    buying_list_has_productFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, buying_list_has_productFB.parameters, param,
            SqlSyntax.GreaterThan, buying_list_has_productFB._addedBlocks)
        : setCriteria(pValue, buying_list_has_productFB.parameters, param,
            SqlSyntax.LessThanOrEquals, buying_list_has_productFB._addedBlocks);
    _waitingNot = '';
    buying_list_has_productFB
            ._addedBlocks.needEndBlock![buying_list_has_productFB._blockIndex] =
        buying_list_has_productFB._addedBlocks.retVal;
    return buying_list_has_productFB;
  }

  Buying_list_has_productFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    buying_list_has_productFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, buying_list_has_productFB.parameters, param,
            SqlSyntax.LessThan, buying_list_has_productFB._addedBlocks)
        : setCriteria(
            pValue,
            buying_list_has_productFB.parameters,
            param,
            SqlSyntax.GreaterThanOrEquals,
            buying_list_has_productFB._addedBlocks);
    _waitingNot = '';
    buying_list_has_productFB
            ._addedBlocks.needEndBlock![buying_list_has_productFB._blockIndex] =
        buying_list_has_productFB._addedBlocks.retVal;
    return buying_list_has_productFB;
  }

  Buying_list_has_productFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    buying_list_has_productFB._addedBlocks = _waitingNot == ''
        ? setCriteria(
            pValue,
            buying_list_has_productFB.parameters,
            param,
            SqlSyntax.GreaterThanOrEquals,
            buying_list_has_productFB._addedBlocks)
        : setCriteria(pValue, buying_list_has_productFB.parameters, param,
            SqlSyntax.LessThan, buying_list_has_productFB._addedBlocks);
    _waitingNot = '';
    buying_list_has_productFB
            ._addedBlocks.needEndBlock![buying_list_has_productFB._blockIndex] =
        buying_list_has_productFB._addedBlocks.retVal;
    return buying_list_has_productFB;
  }

  Buying_list_has_productFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    buying_list_has_productFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, buying_list_has_productFB.parameters, param,
            SqlSyntax.LessThanOrEquals, buying_list_has_productFB._addedBlocks)
        : setCriteria(pValue, buying_list_has_productFB.parameters, param,
            SqlSyntax.GreaterThan, buying_list_has_productFB._addedBlocks);
    _waitingNot = '';
    buying_list_has_productFB
            ._addedBlocks.needEndBlock![buying_list_has_productFB._blockIndex] =
        buying_list_has_productFB._addedBlocks.retVal;
    return buying_list_has_productFB;
  }

  Buying_list_has_productFilterBuilder inValues(dynamic pValue) {
    buying_list_has_productFB._addedBlocks = setCriteria(
        pValue,
        buying_list_has_productFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        buying_list_has_productFB._addedBlocks);
    _waitingNot = '';
    buying_list_has_productFB
            ._addedBlocks.needEndBlock![buying_list_has_productFB._blockIndex] =
        buying_list_has_productFB._addedBlocks.retVal;
    return buying_list_has_productFB;
  }
}
// endregion Buying_list_has_productField

// region Buying_list_has_productFilterBuilder
class Buying_list_has_productFilterBuilder extends SearchCriteria {
  Buying_list_has_productFilterBuilder(Buying_list_has_product obj) {
    whereString = '';
    groupByList = <String>[];
    _addedBlocks.needEndBlock!.add(false);
    _addedBlocks.waitingStartBlock!.add(false);
    _obj = obj;
  }
  AddedBlocks _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
  int _blockIndex = 0;
  List<DbParameter> parameters = <DbParameter>[];
  List<String> orderByList = <String>[];
  Buying_list_has_product? _obj;
  QueryParams qparams = QueryParams();
  int _pagesize = 0;
  int _page = 0;

  /// put the sql keyword 'AND'
  Buying_list_has_productFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  Buying_list_has_productFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  Buying_list_has_productFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock!.add(true);
    _addedBlocks.needEndBlock!.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock![_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  Buying_list_has_productFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock![_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  Buying_list_has_productFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  Buying_list_has_productFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  Buying_list_has_productFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock![_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock!.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock!.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  Buying_list_has_productFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  Buying_list_has_productFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  Buying_list_has_productFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  Buying_list_has_productFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  Buying_list_has_productField setField(
      Buying_list_has_productField? field, String colName, DbType dbtype) {
    return Buying_list_has_productField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock![_blockIndex]);
  }

  Buying_list_has_productField? _id;
  Buying_list_has_productField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  Buying_list_has_productField? _why_need_it;
  Buying_list_has_productField get why_need_it {
    return _why_need_it = setField(_why_need_it, 'why_need_it', DbType.text);
  }

  Buying_list_has_productField? _already_buyed;
  Buying_list_has_productField get already_buyed {
    return _already_buyed =
        setField(_already_buyed, 'already_buyed', DbType.bool);
  }

  Buying_list_has_productField? _id_product;
  Buying_list_has_productField get id_product {
    return _id_product = setField(_id_product, 'id_product', DbType.integer);
  }

  Buying_list_has_productField? _id_buying_list;
  Buying_list_has_productField get id_buying_list {
    return _id_buying_list =
        setField(_id_buying_list, 'id_buying_list', DbType.integer);
  }

  bool _getIsDeleted = false;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text || param.value[0] is String
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName!)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName!);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Buying_list_has_product._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Buying_list_has_product> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult(success: false);

    if (Buying_list_has_product._softDeleteActivated && !hardDelete) {
      r = await _obj!._mnBuying_list_has_product
          .updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj!._mnBuying_list_has_product.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from buying_list_has_products ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj!._mnBuying_list_has_product.updateBatch(qparams, values);
  }

  /// This method always returns Buying_list_has_product Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Buying_list_has_product>
  Future<Buying_list_has_product?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj!._mnBuying_list_has_product.toList(qparams);
    final data = await objFuture;
    Buying_list_has_product? obj;
    if (data.isNotEmpty) {
      obj = Buying_list_has_product.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('product.plProduct') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plProduct'))) {
          /*_loadedfields!.add('product.plProduct');*/
          obj.plProduct = obj.plProduct ??
              await obj.getProduct(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
        if (/*!_loadedfields!.contains('buying_list.plBuying_list') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plBuying_list'))) {
          /*_loadedfields!.add('buying_list.plBuying_list');*/
          obj.plBuying_list = obj.plBuying_list ??
              await obj.getBuying_list(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Buying_list_has_product]
  ///
  /// <returns>int
  Future<int> toCount(
      [VoidCallback Function(int c)? buying_list_has_productCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final buying_list_has_productsFuture =
        await _obj!._mnBuying_list_has_product.toList(qparams);
    final int count = buying_list_has_productsFuture[0]['CNT'] as int;
    if (buying_list_has_productCount != null) {
      buying_list_has_productCount(count);
    }
    return count;
  }

  /// This method returns List<Buying_list_has_product> [Buying_list_has_product]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Buying_list_has_product>
  Future<List<Buying_list_has_product>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Buying_list_has_product> buying_list_has_productsData =
        await Buying_list_has_product.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return buying_list_has_productsData;
  }

  /// This method returns Json String [Buying_list_has_product]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Buying_list_has_product]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Buying_list_has_product]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj!._mnBuying_list_has_product.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Buying_list_has_product]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM buying_list_has_products WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj!._mnBuying_list_has_product.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Buying_list_has_product]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj!._mnBuying_list_has_product.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Buying_list_has_product.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    _buildParameters();

    final objectFuture = _obj!._mnBuying_list_has_product.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion Buying_list_has_productFilterBuilder

// region Buying_list_has_productFields
class Buying_list_has_productFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fWhy_need_it;
  static TableField get why_need_it {
    return _fWhy_need_it = _fWhy_need_it ??
        SqlSyntax.setField(_fWhy_need_it, 'why_need_it', DbType.text);
  }

  static TableField? _fAlready_buyed;
  static TableField get already_buyed {
    return _fAlready_buyed = _fAlready_buyed ??
        SqlSyntax.setField(_fAlready_buyed, 'already_buyed', DbType.bool);
  }

  static TableField? _fId_product;
  static TableField get id_product {
    return _fId_product = _fId_product ??
        SqlSyntax.setField(_fId_product, 'id_product', DbType.integer);
  }

  static TableField? _fId_buying_list;
  static TableField get id_buying_list {
    return _fId_buying_list = _fId_buying_list ??
        SqlSyntax.setField(_fId_buying_list, 'id_buying_list', DbType.integer);
  }
}
// endregion Buying_list_has_productFields

//region Buying_list_has_productManager
class Buying_list_has_productManager extends SqfEntityProvider {
  Buying_list_has_productManager()
      : super(MyDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'buying_list_has_products';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion Buying_list_has_productManager
// region Transactions
class Transactions {
  Transactions({this.id, this.amount, this.id_money_provider, this.isDeleted}) {
    _setDefaultValues();
  }
  Transactions.withFields(this.amount, this.id_money_provider, this.isDeleted) {
    _setDefaultValues();
  }
  Transactions.withId(
      this.id, this.amount, this.id_money_provider, this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Transactions.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['amount'] != null) {
      amount = double.tryParse(o['amount'].toString());
    }
    id_money_provider = int.tryParse(o['id_money_provider'].toString());

    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;

    // RELATIONSHIPS FromMAP
    plMoneyProvider = o['moneyProvider'] != null
        ? MoneyProvider.fromMap(o['moneyProvider'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (Transactions)
  int? id;
  double? amount;
  int? id_money_provider;
  bool? isDeleted;

  BoolResult? saveResult;
  // end FIELDS (Transactions)

// RELATIONSHIPS (Transactions)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plMoneyProvider', 'plField2'..]) or so on..
  MoneyProvider? plMoneyProvider;

  /// get MoneyProvider By Id_money_provider
  Future<MoneyProvider?> getMoneyProvider(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await MoneyProvider().getById(id_money_provider,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (Transactions)

  static const bool _softDeleteActivated = true;
  TransactionsManager? __mnTransactions;

  TransactionsManager get _mnTransactions {
    return __mnTransactions = __mnTransactions ?? TransactionsManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (amount != null) {
      map['amount'] = amount;
    }

    if (id_money_provider != null) {
      map['id_money_provider'] = forView
          ? plMoneyProvider == null
              ? id_money_provider
              : plMoneyProvider!.title
          : id_money_provider;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (amount != null) {
      map['amount'] = amount;
    }

    if (id_money_provider != null) {
      map['id_money_provider'] = forView
          ? plMoneyProvider == null
              ? id_money_provider
              : plMoneyProvider!.title
          : id_money_provider;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [Transactions]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Transactions]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [amount, id_money_provider, isDeleted];
  }

  List<dynamic> toArgsWithIds() {
    return [id, amount, id_money_provider, isDeleted];
  }

  static Future<List<Transactions>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Transactions.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Transactions>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Transactions>[];
    try {
      objList = list
          .map((transactions) =>
              Transactions.fromMap(transactions as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR Transactions.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Transactions>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Transactions> objList = <Transactions>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Transactions.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('money_provider.plMoneyProvider') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plMoneyProvider'))) {
          /*_loadedfields!.add('money_provider.plMoneyProvider');*/
          obj.plMoneyProvider = obj.plMoneyProvider ??
              await obj.getMoneyProvider(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Transactions by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int? id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Transactions if exist, otherwise returns null
  Future<Transactions?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Transactions? obj;
    final data = await _mnTransactions.getById([id]);
    if (data.length != 0) {
      obj = Transactions.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('money_provider.plMoneyProvider') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plMoneyProvider'))) {
          /*_loadedfields!.add('money_provider.plMoneyProvider');*/
          obj.plMoneyProvider = obj.plMoneyProvider ??
              await obj.getMoneyProvider(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Transactions) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int?> save() async {
    if (id == null || id == 0) {
      id = await _mnTransactions.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnTransactions.update(this);
    }

    return id;
  }

  /// saveAs Transactions. Returns a new Primary Key value of Transactions

  /// <returns>Returns a new Primary Key value of Transactions
  Future<int?> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<Transactions> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(
      List<Transactions> transactionses) async {
    // final results = _mnTransactions.saveAll('INSERT OR REPLACE INTO transactions (id,amount, id_money_provider,isDeleted)  VALUES (?,?,?,?)',transactionses);
    // return results; removed in sqfentity_gen 1.3.0+6
    await MyDbModel().batchStart();
    for (final obj in transactionses) {
      await obj.save();
    }
    //    return MyDbModel().batchCommit();
    final result = await MyDbModel().batchCommit();
    for (int i = 0; i < transactionses.length; i++) {
      if (transactionses[i].id == null) {
        transactionses[i].id = result![i] as int;
      }
    }

    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id

  Future<int?> upsert() async {
    try {
      final result = await _mnTransactions.rawInsert(
          'INSERT OR REPLACE INTO transactions (id,amount, id_money_provider,isDeleted)  VALUES (?,?,?,?)',
          [id, amount, id_money_provider, isDeleted]);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Transactions id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Transactions id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Transactions Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Transactions>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Transactions> transactionses) async {
    final results = await _mnTransactions.rawInsertAll(
        'INSERT OR REPLACE INTO transactions (id,amount, id_money_provider,isDeleted)  VALUES (?,?,?,?)',
        transactionses);
    return results;
  }

  /// Deletes Transactions

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted

  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Transactions invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnTransactions
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnTransactions.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Transactions>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover Transactions invoked (id=$id)');
    {
      return _mnTransactions.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  TransactionsFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return TransactionsFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  TransactionsFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return TransactionsFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion transactions

// region TransactionsField
class TransactionsField extends SearchCriteria {
  TransactionsField(this.transactionsFB);
  // { param = DbParameter(); }
  DbParameter param = DbParameter();
  String _waitingNot = '';
  TransactionsFilterBuilder transactionsFB;

  TransactionsField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  TransactionsFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    transactionsFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, transactionsFB.parameters, param,
            SqlSyntax.EQuals, transactionsFB._addedBlocks)
        : setCriteria(pValue, transactionsFB.parameters, param,
            SqlSyntax.NotEQuals, transactionsFB._addedBlocks);
    _waitingNot = '';
    transactionsFB._addedBlocks.needEndBlock![transactionsFB._blockIndex] =
        transactionsFB._addedBlocks.retVal;
    return transactionsFB;
  }

  TransactionsFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    transactionsFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, transactionsFB.parameters, param,
            SqlSyntax.EQualsOrNull, transactionsFB._addedBlocks)
        : setCriteria(pValue, transactionsFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, transactionsFB._addedBlocks);
    _waitingNot = '';
    transactionsFB._addedBlocks.needEndBlock![transactionsFB._blockIndex] =
        transactionsFB._addedBlocks.retVal;
    return transactionsFB;
  }

  TransactionsFilterBuilder isNull() {
    transactionsFB._addedBlocks = setCriteria(
        0,
        transactionsFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        transactionsFB._addedBlocks);
    _waitingNot = '';
    transactionsFB._addedBlocks.needEndBlock![transactionsFB._blockIndex] =
        transactionsFB._addedBlocks.retVal;
    return transactionsFB;
  }

  TransactionsFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      transactionsFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          transactionsFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          transactionsFB._addedBlocks);
      _waitingNot = '';
      transactionsFB._addedBlocks.needEndBlock![transactionsFB._blockIndex] =
          transactionsFB._addedBlocks.retVal;
    }
    return transactionsFB;
  }

  TransactionsFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      transactionsFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          transactionsFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          transactionsFB._addedBlocks);
      _waitingNot = '';
      transactionsFB._addedBlocks.needEndBlock![transactionsFB._blockIndex] =
          transactionsFB._addedBlocks.retVal;
      transactionsFB._addedBlocks.needEndBlock![transactionsFB._blockIndex] =
          transactionsFB._addedBlocks.retVal;
    }
    return transactionsFB;
  }

  TransactionsFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      transactionsFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          transactionsFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          transactionsFB._addedBlocks);
      _waitingNot = '';
      transactionsFB._addedBlocks.needEndBlock![transactionsFB._blockIndex] =
          transactionsFB._addedBlocks.retVal;
    }
    return transactionsFB;
  }

  TransactionsFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      transactionsFB._addedBlocks = setCriteria(
          pFirst,
          transactionsFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          transactionsFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        transactionsFB._addedBlocks = setCriteria(
            pFirst,
            transactionsFB.parameters,
            param,
            SqlSyntax.LessThan,
            transactionsFB._addedBlocks);
      } else {
        transactionsFB._addedBlocks = setCriteria(
            pFirst,
            transactionsFB.parameters,
            param,
            SqlSyntax.GreaterThanOrEquals,
            transactionsFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        transactionsFB._addedBlocks = setCriteria(
            pLast,
            transactionsFB.parameters,
            param,
            SqlSyntax.GreaterThan,
            transactionsFB._addedBlocks);
      } else {
        transactionsFB._addedBlocks = setCriteria(
            pLast,
            transactionsFB.parameters,
            param,
            SqlSyntax.LessThanOrEquals,
            transactionsFB._addedBlocks);
      }
    }
    _waitingNot = '';
    transactionsFB._addedBlocks.needEndBlock![transactionsFB._blockIndex] =
        transactionsFB._addedBlocks.retVal;
    return transactionsFB;
  }

  TransactionsFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    transactionsFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, transactionsFB.parameters, param,
            SqlSyntax.GreaterThan, transactionsFB._addedBlocks)
        : setCriteria(pValue, transactionsFB.parameters, param,
            SqlSyntax.LessThanOrEquals, transactionsFB._addedBlocks);
    _waitingNot = '';
    transactionsFB._addedBlocks.needEndBlock![transactionsFB._blockIndex] =
        transactionsFB._addedBlocks.retVal;
    return transactionsFB;
  }

  TransactionsFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    transactionsFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, transactionsFB.parameters, param,
            SqlSyntax.LessThan, transactionsFB._addedBlocks)
        : setCriteria(pValue, transactionsFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, transactionsFB._addedBlocks);
    _waitingNot = '';
    transactionsFB._addedBlocks.needEndBlock![transactionsFB._blockIndex] =
        transactionsFB._addedBlocks.retVal;
    return transactionsFB;
  }

  TransactionsFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    transactionsFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, transactionsFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, transactionsFB._addedBlocks)
        : setCriteria(pValue, transactionsFB.parameters, param,
            SqlSyntax.LessThan, transactionsFB._addedBlocks);
    _waitingNot = '';
    transactionsFB._addedBlocks.needEndBlock![transactionsFB._blockIndex] =
        transactionsFB._addedBlocks.retVal;
    return transactionsFB;
  }

  TransactionsFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    transactionsFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, transactionsFB.parameters, param,
            SqlSyntax.LessThanOrEquals, transactionsFB._addedBlocks)
        : setCriteria(pValue, transactionsFB.parameters, param,
            SqlSyntax.GreaterThan, transactionsFB._addedBlocks);
    _waitingNot = '';
    transactionsFB._addedBlocks.needEndBlock![transactionsFB._blockIndex] =
        transactionsFB._addedBlocks.retVal;
    return transactionsFB;
  }

  TransactionsFilterBuilder inValues(dynamic pValue) {
    transactionsFB._addedBlocks = setCriteria(
        pValue,
        transactionsFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        transactionsFB._addedBlocks);
    _waitingNot = '';
    transactionsFB._addedBlocks.needEndBlock![transactionsFB._blockIndex] =
        transactionsFB._addedBlocks.retVal;
    return transactionsFB;
  }
}
// endregion TransactionsField

// region TransactionsFilterBuilder
class TransactionsFilterBuilder extends SearchCriteria {
  TransactionsFilterBuilder(Transactions obj) {
    whereString = '';
    groupByList = <String>[];
    _addedBlocks.needEndBlock!.add(false);
    _addedBlocks.waitingStartBlock!.add(false);
    _obj = obj;
  }
  AddedBlocks _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
  int _blockIndex = 0;
  List<DbParameter> parameters = <DbParameter>[];
  List<String> orderByList = <String>[];
  Transactions? _obj;
  QueryParams qparams = QueryParams();
  int _pagesize = 0;
  int _page = 0;

  /// put the sql keyword 'AND'
  TransactionsFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  TransactionsFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  TransactionsFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock!.add(true);
    _addedBlocks.needEndBlock!.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock![_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  TransactionsFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock![_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  TransactionsFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  TransactionsFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  TransactionsFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock![_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock!.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock!.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  TransactionsFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  TransactionsFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  TransactionsFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  TransactionsFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  TransactionsField setField(
      TransactionsField? field, String colName, DbType dbtype) {
    return TransactionsField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock![_blockIndex]);
  }

  TransactionsField? _id;
  TransactionsField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  TransactionsField? _amount;
  TransactionsField get amount {
    return _amount = setField(_amount, 'amount', DbType.real);
  }

  TransactionsField? _id_money_provider;
  TransactionsField get id_money_provider {
    return _id_money_provider =
        setField(_id_money_provider, 'id_money_provider', DbType.integer);
  }

  TransactionsField? _isDeleted;
  TransactionsField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted = false;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text || param.value[0] is String
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName!)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName!);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Transactions._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Transactions> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult(success: false);

    if (Transactions._softDeleteActivated && !hardDelete) {
      r = await _obj!._mnTransactions.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj!._mnTransactions.delete(qparams);
    }
    return r;
  }

  /// Recover List<Transactions> bulk by query
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover Transactions bulk invoked');
    return _obj!._mnTransactions.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from transactions ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj!._mnTransactions.updateBatch(qparams, values);
  }

  /// This method always returns Transactions Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Transactions>
  Future<Transactions?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj!._mnTransactions.toList(qparams);
    final data = await objFuture;
    Transactions? obj;
    if (data.isNotEmpty) {
      obj = Transactions.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('money_provider.plMoneyProvider') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plMoneyProvider'))) {
          /*_loadedfields!.add('money_provider.plMoneyProvider');*/
          obj.plMoneyProvider = obj.plMoneyProvider ??
              await obj.getMoneyProvider(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Transactions]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c)? transactionsCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final transactionsesFuture = await _obj!._mnTransactions.toList(qparams);
    final int count = transactionsesFuture[0]['CNT'] as int;
    if (transactionsCount != null) {
      transactionsCount(count);
    }
    return count;
  }

  /// This method returns List<Transactions> [Transactions]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Transactions>
  Future<List<Transactions>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Transactions> transactionsesData =
        await Transactions.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return transactionsesData;
  }

  /// This method returns Json String [Transactions]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Transactions]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Transactions]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj!._mnTransactions.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Transactions]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM transactions WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj!._mnTransactions.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Transactions]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj!._mnTransactions.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Transactions.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    _buildParameters();

    final objectFuture = _obj!._mnTransactions.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion TransactionsFilterBuilder

// region TransactionsFields
class TransactionsFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fAmount;
  static TableField get amount {
    return _fAmount =
        _fAmount ?? SqlSyntax.setField(_fAmount, 'amount', DbType.real);
  }

  static TableField? _fId_money_provider;
  static TableField get id_money_provider {
    return _fId_money_provider = _fId_money_provider ??
        SqlSyntax.setField(
            _fId_money_provider, 'id_money_provider', DbType.integer);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion TransactionsFields

//region TransactionsManager
class TransactionsManager extends SqfEntityProvider {
  TransactionsManager()
      : super(MyDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'transactions';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion TransactionsManager
/// Region SEQUENCE IdentitySequence
class IdentitySequence {
  /// Assigns a new value when it is triggered and returns the new value
  /// returns Future<int>
  Future<int> nextVal([VoidCallback Function(int o)? nextval]) async {
    final val = await MyDbModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, true);
    if (nextval != null) {
      nextval(val);
    }
    return val;
  }

  /// Get the current value
  /// returns Future<int>
  Future<int> currentVal([VoidCallback Function(int o)? currentval]) async {
    final val = await MyDbModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }

  /// Reset sequence to start value
  /// returns start value
  Future<int> reset([VoidCallback Function(int o)? currentval]) async {
    final val = await MyDbModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false, reset: true);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }
}

/// End Region SEQUENCE IdentitySequence

class MyDbModelSequenceManager extends SqfEntityProvider {
  MyDbModelSequenceManager() : super(MyDbModel());
}
// END OF ENTITIES
